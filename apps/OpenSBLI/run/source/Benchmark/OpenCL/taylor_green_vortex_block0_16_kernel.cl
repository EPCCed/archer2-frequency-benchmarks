//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5
#define ZERO_double 0.0;
#define INFINITY_double INFINITY;
#define ZERO_float 0.0f;
#define INFINITY_float INFINITY;
#define ZERO_int 0;
#define INFINITY_int INFINITY;
#define ZERO_uint 0;
#define INFINITY_uint INFINITY;
#define ZERO_ll 0;
#define INFINITY_ll INFINITY;
#define ZERO_ull 0;
#define INFINITY_ull INFINITY;
#define ZERO_bool 0;

#undef OPS_ACC0
#undef OPS_ACC1
#undef OPS_ACC2
#undef OPS_ACC3
#undef OPS_ACC4


#define OPS_ACC0(x,y,z) (x+xdim0_taylor_green_vortex_block0_16_kernel*(y)+xdim0_taylor_green_vortex_block0_16_kernel*ydim0_taylor_green_vortex_block0_16_kernel*(z))
#define OPS_ACC1(x,y,z) (x+xdim1_taylor_green_vortex_block0_16_kernel*(y)+xdim1_taylor_green_vortex_block0_16_kernel*ydim1_taylor_green_vortex_block0_16_kernel*(z))
#define OPS_ACC2(x,y,z) (x+xdim2_taylor_green_vortex_block0_16_kernel*(y)+xdim2_taylor_green_vortex_block0_16_kernel*ydim2_taylor_green_vortex_block0_16_kernel*(z))
#define OPS_ACC3(x,y,z) (x+xdim3_taylor_green_vortex_block0_16_kernel*(y)+xdim3_taylor_green_vortex_block0_16_kernel*ydim3_taylor_green_vortex_block0_16_kernel*(z))
#define OPS_ACC4(x,y,z) (x+xdim4_taylor_green_vortex_block0_16_kernel*(y)+xdim4_taylor_green_vortex_block0_16_kernel*ydim4_taylor_green_vortex_block0_16_kernel*(z))


//user function
void taylor_green_vortex_block0_16_kernel(__global double * restrict rhou1,__global double * restrict rhoE,__global double * restrict rho,
__global double * restrict rhou2,__global double * restrict rhou0,const  int * restrict idx,
  const double deltai2,
const double Minf,
const double rinv13,
const double rinv15,
const double deltai1,
const double deltai0,
const double gama)


{
double x = deltai0*idx[0];
double y = deltai1*idx[1];
double z = deltai2*idx[2];
double u = sin(x)*cos(y)*cos(z);
double v = -cos(x)*sin(y)*cos(z);
double w = 0.0;
double p = 1.0*rinv15 + 0.0625*(cos(2.0*x) + cos(2.0*y))*(2.0 + cos(2.0*z));
double r = gama*pow(Minf, 2)*p;
rho[OPS_ACC2(0,0,0)] = r;
rhou0[OPS_ACC4(0,0,0)] = r*u;
rhou1[OPS_ACC0(0,0,0)] = r*v;
rhou2[OPS_ACC3(0,0,0)] = 0.0;
rhoE[OPS_ACC1(0,0,0)] = rinv13*p + 0.5*r*(pow(u, 2) + pow(v, 2) + pow(w, 2));
}



__kernel void ops_taylor_green_vortex_block0_16_kernel(
__global double* restrict arg0,
__global double* restrict arg1,
__global double* restrict arg2,
__global double* restrict arg3,
__global double* restrict arg4,
const double deltai2,
const double Minf,
const double rinv13,
const double rinv15,
const double deltai1,
const double deltai0,
const double gama,
const int base0,
const int base1,
const int base2,
const int base3,
const int base4,
int arg_idx0, int arg_idx1, int arg_idx2,
const int size0,
const int size1,
const int size2 ){


  int idx_y = get_global_id(1);
  int idx_z = get_global_id(2);
  int idx_x = get_global_id(0);

  int arg_idx[3];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  arg_idx[2] = arg_idx2+idx_z;
  if (idx_x < size0 && idx_y < size1 && idx_z < size2) {
    taylor_green_vortex_block0_16_kernel(&arg0[base0 + idx_x * 1*1 + idx_y * 1*1 * xdim0_taylor_green_vortex_block0_16_kernel + idx_z * 1*1 * xdim0_taylor_green_vortex_block0_16_kernel * ydim0_taylor_green_vortex_block0_16_kernel],
                                         &arg1[base1 + idx_x * 1*1 + idx_y * 1*1 * xdim1_taylor_green_vortex_block0_16_kernel + idx_z * 1*1 * xdim1_taylor_green_vortex_block0_16_kernel * ydim1_taylor_green_vortex_block0_16_kernel],
                                         &arg2[base2 + idx_x * 1*1 + idx_y * 1*1 * xdim2_taylor_green_vortex_block0_16_kernel + idx_z * 1*1 * xdim2_taylor_green_vortex_block0_16_kernel * ydim2_taylor_green_vortex_block0_16_kernel],
                                         &arg3[base3 + idx_x * 1*1 + idx_y * 1*1 * xdim3_taylor_green_vortex_block0_16_kernel + idx_z * 1*1 * xdim3_taylor_green_vortex_block0_16_kernel * ydim3_taylor_green_vortex_block0_16_kernel],
                                         &arg4[base4 + idx_x * 1*1 + idx_y * 1*1 * xdim4_taylor_green_vortex_block0_16_kernel + idx_z * 1*1 * xdim4_taylor_green_vortex_block0_16_kernel * ydim4_taylor_green_vortex_block0_16_kernel],
                                         arg_idx,
                                         deltai2,
                                         Minf,
                                         rinv13,
                                         rinv15,
                                         deltai1,
                                         deltai0,
                                         gama);
  }

}
