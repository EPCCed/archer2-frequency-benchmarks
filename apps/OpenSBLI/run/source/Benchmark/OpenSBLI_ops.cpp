//
// auto-generated by ops.py//

#include <stdlib.h>
#include <string.h>
#include <math.h>

int nx2;
int nx1;
double deltai2;
double rinv9;
double Minf;
double rinv1;
double rinv4;
double rinv5;
double rinv6;
double Pr;
double rinv12;
double rinv13;
double rinv10;
double rinv11;
double rc8;
double rinv14;
double rknew[3];
double rinv15;
double rc7;
double rc0;
double rc2;
double rc3;
int nx0;
double deltai1;
double deltai0;
double Re;
double deltat;
double gama;
double rkold[3];
int niter;
double Lx[3];

#define OPS_3D
#include  "ops_lib_cpp.h"

//
// ops_par_loop declarations
//

void ops_par_loop_taylor_green_vortex_block0_16_kernel(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg );

void ops_par_loop_taylor_green_vortex_block0_15_kernel(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg );

void ops_par_loop_taylor_green_vortex_block0_0_kernel(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg );

void ops_par_loop_taylor_green_vortex_block0_3_kernel(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );

void ops_par_loop_taylor_green_vortex_block0_4_kernel(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );

void ops_par_loop_taylor_green_vortex_block0_5_kernel(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );

void ops_par_loop_taylor_green_vortex_block0_6_kernel(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );

void ops_par_loop_taylor_green_vortex_block0_7_kernel(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );

void ops_par_loop_taylor_green_vortex_block0_8_kernel(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );

void ops_par_loop_taylor_green_vortex_block0_9_kernel(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );

void ops_par_loop_taylor_green_vortex_block0_10_kernel(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );

void ops_par_loop_taylor_green_vortex_block0_11_kernel(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );

void ops_par_loop_taylor_green_vortex_block0_12_kernel(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg );

void ops_par_loop_taylor_green_vortex_block0_13_kernel(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg );

void ops_par_loop_taylor_green_vortex_block0_14_kernel(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg );

void ops_par_loop_taylor_green_vortex_block0_17_kernel(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg );

void ops_par_loop_taylor_green_vortex_block0_18_kernel(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg );


//#include "OpenSBLI_block_0_kernel.h"

int main (int argc, char **argv)
{

    char type_of_simulation[2], HDF5op[4];
    int number_of_processes, grid_points, number_of_iters;
    FILE *inputfile;
    inputfile = fopen("input", "r");
//    ops_printf("\n---------------------------------------------------------------------------\n");


//    printf("This is the benchmark application developed for the CFD application of the \nUK HPC benchmark suite. The compressible Navier-Stokes equations are solved\non a Cartesian mesh using fourth order central finite difference scheme\nand three stage Runge-Kutta time stepping scheme.\n\n    Authors Dr. Satya P Jammy and Prof. Neil Sandham\n");
//    ops_printf("\n---------------------------------------------------------------------------\n");
//    ops_printf("Some simulation information \n");
    if (inputfile) {
        fscanf(inputfile, "%s %d %d %d %s", type_of_simulation, &grid_points, &number_of_iters, &number_of_processes, HDF5op);
    }
    if (strcmp(type_of_simulation,"va") == 0){
        ops_printf("The simulation performed is the validation simulation \n");

        nx0 = 128;
        nx1 = 128;
        nx2 = 128;

        Lx[0] = 2.0*M_PI;
        Lx[1] = 2.0*M_PI;
        Lx[2] = 2.0*M_PI;
        niter = 500;

        deltat = 0.000846250000000000;
        deltat = deltat*2.0;
        ops_printf("The number of grid points used per direction are %d\nThe total number of grid points are %d\n",nx0, nx0*nx1*nx2);
    }
    else if (strcmp(type_of_simulation,"ss") == 0){
//        ops_printf("The simulation is performed is the strong scaling simulation \n");

        nx0 = grid_points;
        nx1 = grid_points;
        nx2 = grid_points;

        Lx[0] = 2.0*M_PI;
        Lx[1] = 2.0*M_PI;
        Lx[2] = 2.0*M_PI;
        niter = number_of_iters;

        deltat = 0.000846250000000000*256/grid_points;
 //       ops_printf("The number of grid points used per direction are %d\nThe total number of grid points are %d\n",nx0, nx0*nx1*nx2);
    }
    else if (strcmp(type_of_simulation,"ws") == 0){
        ops_printf("The simulation is performed is the weak scaling simulation on %d number of processes using %d grid points per process \n",number_of_processes, grid_points);
        nx0 = grid_points*number_of_processes;
        nx1 = grid_points*number_of_processes;
        nx2 = grid_points*number_of_processes;

        Lx[0] = 2.0*M_PI*number_of_processes;
        Lx[1] = 2.0*M_PI*number_of_processes;
        Lx[2] = 2.0*M_PI*number_of_processes;
        niter = number_of_iters;

        deltat = 0.000846250000000000*256/grid_points;
        ops_printf("The total number of grid points are %d\n",nx0*nx1*nx2);
    }
    else{
        ops_printf("The simulation name is invalid \nThe simulation name provided is %s\nit should be one of the following\nva, ss or ws\n",type_of_simulation);
        ops_printf("aborting the simulation\n");
        exit(0);
    }

    deltai0 = Lx[0]/nx0;
    deltai1 = Lx[1]/nx1;
    deltai2 = Lx[2]/nx2;

   gama = 1.40000000000000;
   Pr = 0.710000000000000;
   Re = 1600;
   Minf = 0.100000000000000;

   rc8 = 4.0/3.0;
   rc7 = 5.0/2.0;
   rc0 = 1.0/2.0;
   rc2 = 1.0/12.0;
   rc3 = 2.0/3.0;
   rinv13 = 1.0/(gama - 1);
   rinv11 = 1.0/Re;
   rinv14 = pow(Minf, -2);
   rinv15 = 1.0/(gama*pow(Minf, 2));
   rinv12 = 1.0/Pr;
   rinv10 = pow(deltai1, -2);
   rinv9 = pow(deltai0, -2);
   rinv1 = 1.0/deltai2;
   rinv4 = 1.0/deltai1;
   rinv5 = 1.0/deltai0;
   rinv6 = pow(deltai2, -2);


   rkold[0] = 1.0/4.0;
   rkold[1] = 3.0/20.0;
   rkold[2] = 3.0/5.0;
   rknew[0] = 2.0/3.0;
   rknew[1] = 5.0/12.0;
   rknew[2] = 3.0/5.0;

   ops_init(argc,argv,1);

    ops_decl_const2( "nx2",1, "int",&nx2);
    ops_decl_const2( "nx1",1, "int",&nx1);
    ops_decl_const2( "deltai2",1, "double",&deltai2);
    ops_decl_const2( "rinv9",1, "double",&rinv9);
    ops_decl_const2( "Minf",1, "double",&Minf);
    ops_decl_const2( "rinv1",1, "double",&rinv1);
    ops_decl_const2( "rinv4",1, "double",&rinv4);
    ops_decl_const2( "rinv5",1, "double",&rinv5);
    ops_decl_const2( "rinv6",1, "double",&rinv6);
    ops_decl_const2( "Pr",1, "double",&Pr);
    ops_decl_const2( "rinv12",1, "double",&rinv12);
    ops_decl_const2( "rinv13",1, "double",&rinv13);
    ops_decl_const2( "rinv10",1, "double",&rinv10);
    ops_decl_const2( "rinv11",1, "double",&rinv11);
    ops_decl_const2( "rc8",1, "double",&rc8);
    ops_decl_const2( "rinv14",1, "double",&rinv14);
    ops_decl_const2( "rinv15",1, "double",&rinv15);
    ops_decl_const2( "rc7",1, "double",&rc7);
    ops_decl_const2( "rc0",1, "double",&rc0);
    ops_decl_const2( "rc2",1, "double",&rc2);
    ops_decl_const2( "rc3",1, "double",&rc3);
    ops_decl_const2( "nx0",1, "int",&nx0);
    ops_decl_const2( "deltai1",1, "double",&deltai1);
    ops_decl_const2( "deltai0",1, "double",&deltai0);
    ops_decl_const2( "Re",1, "double",&Re);
    ops_decl_const2( "deltat",1, "double",&deltat);
    ops_decl_const2( "gama",1, "double",&gama);

   ops_block taylor_green_vortex_block;

   taylor_green_vortex_block = ops_decl_block(3, "taylor_green_vortex_block");

   ops_dat wk3;
   ops_dat wk7;
   ops_dat p;
   ops_dat wk1;
   ops_dat wk2;
   ops_dat wk6;
   ops_dat rho;
   ops_dat rhou2;
   ops_dat wk11;
   ops_dat u1;
   ops_dat wk0;
   ops_dat rho_old;
   ops_dat wk8;
   ops_dat u0;
   ops_dat rhoE_old;
   ops_dat wk12;
   ops_dat rhoE;
   ops_dat rhou1_old;
   ops_dat wk10;
   ops_dat wk5;
   ops_dat u2;
   ops_dat wk9;
   ops_dat rhou1;
   ops_dat wk4;
   ops_dat rhou0;
   ops_dat T;
   ops_dat rhou2_old;
   ops_dat wk13;
   ops_dat rhou0_old;

   int halo_p[] = {2, 2, 2};
   int halo_m[] = {-2, -2, -2};
   int size[] = {nx0, nx1, nx2};
   int base[] = {0, 0, 0};
   double* val = NULL;
   wk3 = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "wk3");
   wk7 = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "wk7");
   p = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "p");
   wk1 = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "wk1");
   wk2 = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "wk2");
   wk6 = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "wk6");
   rho = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "rho");
   rhou2 = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "rhou2");
   wk11 = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "wk11");
   u1 = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "u1");
   wk0 = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "wk0");
   rho_old = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "rho_old");
   wk8 = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "wk8");
   u0 = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "u0");
   rhoE_old = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "rhoE_old");
   wk12 = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "wk12");
   rhoE = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "rhoE");
   rhou1_old = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "rhou1_old");
   wk10 = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "wk10");
   wk5 = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "wk5");
   u2 = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "u2");
   wk9 = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "wk9");
   rhou1 = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "rhou1");
   wk4 = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "wk4");
   rhou0 = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "rhou0");
   T = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "T");
   rhou2_old = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "rhou2_old");
   wk13 = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "wk13");
   rhou0_old = ops_decl_dat(taylor_green_vortex_block, 1, size, base, halo_m, halo_p, val, "double", "rhou0_old");

   int stencil7_temp[] = {0,0,-2,0,0,-1,0,-2,0,0,-1,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,2};
   ops_stencil stencil7 = ops_decl_stencil(3,9,stencil7_temp,"0,0,-2,0,0,-1,0,-2,0,0,-1,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,2");
   int stencil2_temp[] = {0,-2,0,0,-1,0,0,1,0,0,2,0};
   ops_stencil stencil2 = ops_decl_stencil(3,4,stencil2_temp,"0,-2,0,0,-1,0,0,1,0,0,2,0");
   int stencil5_temp[] = {0,0,-2,0,0,-1,0,-2,0,0,-1,0,-2,0,0,-1,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,2,0,0,0,1,0,0,2};
   ops_stencil stencil5 = ops_decl_stencil(3,13,stencil5_temp,"0,0,-2,0,0,-1,0,-2,0,0,-1,0,-2,0,0,-1,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,2,0,0,0,1,0,0,2");
   int stencil6_temp[] = {0,0,-2,0,0,-1,0,-2,0,0,-1,0,-2,0,0,-1,0,0,1,0,0,2,0,0,0,1,0,0,2,0,0,0,1,0,0,2};
   ops_stencil stencil6 = ops_decl_stencil(3,12,stencil6_temp,"0,0,-2,0,0,-1,0,-2,0,0,-1,0,-2,0,0,-1,0,0,1,0,0,2,0,0,0,1,0,0,2,0,0,0,1,0,0,2");
   int stencil8_temp[] = {0,-2,0,0,-1,0,0,0,0,0,1,0,0,2,0};
   ops_stencil stencil8 = ops_decl_stencil(3,5,stencil8_temp,"0,-2,0,0,-1,0,0,0,0,0,1,0,0,2,0");
   int stencil4_temp[] = {0,0,-2,0,0,-1,0,0,0,0,0,1,0,0,2};
   ops_stencil stencil4 = ops_decl_stencil(3,5,stencil4_temp,"0,0,-2,0,0,-1,0,0,0,0,0,1,0,0,2");
   int stencil1_temp[] = {0,0,-2,0,0,-1,0,0,1,0,0,2};
   ops_stencil stencil1 = ops_decl_stencil(3,4,stencil1_temp,"0,0,-2,0,0,-1,0,0,1,0,0,2");
   int stencil0_temp[] = {0,0,0};
   ops_stencil stencil0 = ops_decl_stencil(3,1,stencil0_temp,"0,0,0");
   int stencil3_temp[] = {-2,0,0,-1,0,0,1,0,0,2,0,0};
   ops_stencil stencil3 = ops_decl_stencil(3,4,stencil3_temp,"-2,0,0,-1,0,0,1,0,0,2,0,0");

   int stencil9_temp[] = {0,0,-2,0,0,-1,-2,0,0,-1,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,2};
   ops_stencil stencil9 = ops_decl_stencil(3,9,stencil9_temp,"0,0,-2,0,0,-1,-2,0,0,-1,0,0,0,0,0,1,0,0,2,0,0,0,0,1,0,0,2");
   int stencil10_temp[] = {0,-2,0,0,-1,0,-2,0,0,-1,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,2,0};
   ops_stencil stencil10 = ops_decl_stencil(3,9,stencil10_temp,"0,-2,0,0,-1,0,-2,0,0,-1,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,2,0");

   ops_reduction enstrophy = ops_decl_reduction_handle(sizeof(double), "double", "reduction_enstrophy");
   ops_reduction rhomean = ops_decl_reduction_handle(sizeof(double), "double", "reduction_rhomean");
   ops_reduction ke = ops_decl_reduction_handle(sizeof(double), "double", "reduction_ke");


   ops_halo_group halo_exchange0 ;
   {
      int halo_iter[] = {2, nx1 + 4, nx2 + 4};
      int from_base[] = {0, -2, -2};
      int to_base[] = {nx0, -2, -2};
      int dir[] = {1, 2, 3};
      ops_halo halo0 = ops_decl_halo(rho, rho, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo1 = ops_decl_halo(rhou0, rhou0, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo2 = ops_decl_halo(rhou1, rhou1, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo3 = ops_decl_halo(rhou2, rhou2, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo4 = ops_decl_halo(rhoE, rhoE, halo_iter, from_base, to_base, dir, dir);
      ops_halo grp[] = {halo0,halo1,halo2,halo3,halo4};
      halo_exchange0 = ops_decl_halo_group(5,grp);
   }

   ops_halo_group halo_exchange1 ;
   {
      int halo_iter[] = {2, nx1 + 4, nx2 + 4};
      int from_base[] = {nx0 - 2, -2, -2};
      int to_base[] = {-2, -2, -2};
      int dir[] = {1, 2, 3};
      ops_halo halo0 = ops_decl_halo(rho, rho, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo1 = ops_decl_halo(rhou0, rhou0, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo2 = ops_decl_halo(rhou1, rhou1, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo3 = ops_decl_halo(rhou2, rhou2, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo4 = ops_decl_halo(rhoE, rhoE, halo_iter, from_base, to_base, dir, dir);
      ops_halo grp[] = {halo0,halo1,halo2,halo3,halo4};
      halo_exchange1 = ops_decl_halo_group(5,grp);
   }

   ops_halo_group halo_exchange2 ;
   {
      int halo_iter[] = {nx0 + 4, 2, nx2 + 4};
      int from_base[] = {-2, 0, -2};
      int to_base[] = {-2, nx1, -2};
      int dir[] = {1, 2, 3};
      ops_halo halo0 = ops_decl_halo(rho, rho, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo1 = ops_decl_halo(rhou0, rhou0, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo2 = ops_decl_halo(rhou1, rhou1, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo3 = ops_decl_halo(rhou2, rhou2, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo4 = ops_decl_halo(rhoE, rhoE, halo_iter, from_base, to_base, dir, dir);
      ops_halo grp[] = {halo0,halo1,halo2,halo3,halo4};
      halo_exchange2 = ops_decl_halo_group(5,grp);
   }

   ops_halo_group halo_exchange3 ;
   {
      int halo_iter[] = {nx0 + 4, 2, nx2 + 4};
      int from_base[] = {-2, nx1 - 2, -2};
      int to_base[] = {-2, -2, -2};
      int dir[] = {1, 2, 3};
      ops_halo halo0 = ops_decl_halo(rho, rho, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo1 = ops_decl_halo(rhou0, rhou0, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo2 = ops_decl_halo(rhou1, rhou1, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo3 = ops_decl_halo(rhou2, rhou2, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo4 = ops_decl_halo(rhoE, rhoE, halo_iter, from_base, to_base, dir, dir);
      ops_halo grp[] = {halo0,halo1,halo2,halo3,halo4};
      halo_exchange3 = ops_decl_halo_group(5,grp);
   }

   ops_halo_group halo_exchange4 ;
   {
      int halo_iter[] = {nx0 + 4, nx1 + 4, 2};
      int from_base[] = {-2, -2, 0};
      int to_base[] = {-2, -2, nx2};
      int dir[] = {1, 2, 3};
      ops_halo halo0 = ops_decl_halo(rho, rho, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo1 = ops_decl_halo(rhou0, rhou0, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo2 = ops_decl_halo(rhou1, rhou1, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo3 = ops_decl_halo(rhou2, rhou2, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo4 = ops_decl_halo(rhoE, rhoE, halo_iter, from_base, to_base, dir, dir);
      ops_halo grp[] = {halo0,halo1,halo2,halo3,halo4};
      halo_exchange4 = ops_decl_halo_group(5,grp);
   }

   ops_halo_group halo_exchange5 ;
   {
      int halo_iter[] = {nx0 + 4, nx1 + 4, 2};
      int from_base[] = {-2, -2, nx2 - 2};
      int to_base[] = {-2, -2, -2};
      int dir[] = {1, 2, 3};
      ops_halo halo0 = ops_decl_halo(rho, rho, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo1 = ops_decl_halo(rhou0, rhou0, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo2 = ops_decl_halo(rhou1, rhou1, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo3 = ops_decl_halo(rhou2, rhou2, halo_iter, from_base, to_base, dir, dir);
      ops_halo halo4 = ops_decl_halo(rhoE, rhoE, halo_iter, from_base, to_base, dir, dir);
      ops_halo grp[] = {halo0,halo1,halo2,halo3,halo4};
      halo_exchange5 = ops_decl_halo_group(5,grp);
   }

   ops_partition("");

//   ops_printf("End of the simulation information\n");
//   ops_printf("---------------------------------------------------------------------------\n");

   int iter_range16[] = {-2, nx0 + 2, -2, nx1 + 2, -2, nx2 + 2};
   ops_par_loop_taylor_green_vortex_block0_16_kernel("Initialisation", taylor_green_vortex_block, 3, iter_range16,
                ops_arg_dat(rhou1, 1, stencil0, "double", OPS_WRITE),
                ops_arg_dat(rhoE, 1, stencil0, "double", OPS_WRITE),
                ops_arg_dat(rho, 1, stencil0, "double", OPS_WRITE),
                ops_arg_dat(rhou2, 1, stencil0, "double", OPS_WRITE),
                ops_arg_dat(rhou0, 1, stencil0, "double", OPS_WRITE),
                ops_arg_idx());


   ops_halo_transfer(halo_exchange0);

   ops_halo_transfer(halo_exchange1);

   ops_halo_transfer(halo_exchange2);

   ops_halo_transfer(halo_exchange3);

   ops_halo_transfer(halo_exchange4);

   ops_halo_transfer(halo_exchange5);

   double cpu_start, elapsed_start;
   ops_timers(&cpu_start, &elapsed_start);

   for (int iteration=0; iteration<niter; iteration++){
       if (iteration%100 == 0){
       ops_printf("Iteration is %d \n", iteration);
       }

      int iter_range15[] = {-2, nx0 + 2, -2, nx1 + 2, -2, nx2 + 2};
      ops_par_loop_taylor_green_vortex_block0_15_kernel("Save equations", taylor_green_vortex_block, 3, iter_range15,
                   ops_arg_dat(rhou1, 1, stencil0, "double", OPS_READ),
                   ops_arg_dat(rhoE, 1, stencil0, "double", OPS_READ),
                   ops_arg_dat(rho, 1, stencil0, "double", OPS_READ),
                   ops_arg_dat(rhou2, 1, stencil0, "double", OPS_READ),
                   ops_arg_dat(rhou0, 1, stencil0, "double", OPS_READ),
                   ops_arg_dat(rhou1_old, 1, stencil0, "double", OPS_WRITE),
                   ops_arg_dat(rhou2_old, 1, stencil0, "double", OPS_WRITE),
                   ops_arg_dat(rhou0_old, 1, stencil0, "double", OPS_WRITE),
                   ops_arg_dat(rho_old, 1, stencil0, "double", OPS_WRITE),
                   ops_arg_dat(rhoE_old, 1, stencil0, "double", OPS_WRITE));


      for (int stage=0; stage<3; stage++){

         int iter_range0[] = {-2, nx0 + 2, -2, nx1 + 2, -2, nx2 + 2};
         ops_par_loop_taylor_green_vortex_block0_0_kernel("Grouped Formula Evaluation", taylor_green_vortex_block, 3, iter_range0,
                      ops_arg_dat(rhou1, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(rho, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(rhoE, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(rhou2, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(rhou0, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(u0, 1, stencil0, "double", OPS_WRITE),
                      ops_arg_dat(u1, 1, stencil0, "double", OPS_WRITE),
                      ops_arg_dat(u2, 1, stencil0, "double", OPS_WRITE),
                      ops_arg_dat(p, 1, stencil0, "double", OPS_WRITE),
                      ops_arg_dat(T, 1, stencil0, "double", OPS_WRITE));

         int iter_range3[] = {0, nx0, 0, nx1, 0, nx2};
         ops_par_loop_taylor_green_vortex_block0_3_kernel("D(u0 x2)", taylor_green_vortex_block, 3, iter_range3,
                      ops_arg_dat(u0, 1, stencil1, "double", OPS_READ),
                      ops_arg_dat(wk0, 1, stencil0, "double", OPS_WRITE));

         int iter_range4[] = {0, nx0, 0, nx1, 0, nx2};
         ops_par_loop_taylor_green_vortex_block0_4_kernel("D(u0 x1)", taylor_green_vortex_block, 3, iter_range4,
                      ops_arg_dat(u0, 1, stencil2, "double", OPS_READ),
                      ops_arg_dat(wk1, 1, stencil0, "double", OPS_WRITE));

         int iter_range5[] = {0, nx0, 0, nx1, -2, nx2 + 2};
         ops_par_loop_taylor_green_vortex_block0_5_kernel("D(u2 x0)", taylor_green_vortex_block, 3, iter_range5,
                      ops_arg_dat(u2, 1, stencil3, "double", OPS_READ),
                      ops_arg_dat(wk2, 1, stencil0, "double", OPS_WRITE));

         int iter_range6[] = {0, nx0, 0, nx1, -2, nx2 + 2};
         ops_par_loop_taylor_green_vortex_block0_6_kernel("D(u1[x0 x1 x2 t] x1)", taylor_green_vortex_block, 3, iter_range6,
                      ops_arg_dat(u1, 1, stencil2, "double", OPS_READ),
                      ops_arg_dat(wk3, 1, stencil0, "double", OPS_WRITE));

         int iter_range7[] = {0, nx0, -2, nx1 + 2, 0, nx2};
         ops_par_loop_taylor_green_vortex_block0_7_kernel("D(u1[x0 x1 x2 t] x0)", taylor_green_vortex_block, 3, iter_range7,
                      ops_arg_dat(u1, 1, stencil3, "double", OPS_READ),
                      ops_arg_dat(wk4, 1, stencil0, "double", OPS_WRITE));

         int iter_range8[] = {0, nx0, 0, nx1, -2, nx2 + 2};
         ops_par_loop_taylor_green_vortex_block0_8_kernel("D(u2 x1)", taylor_green_vortex_block, 3, iter_range8,
                      ops_arg_dat(u2, 1, stencil2, "double", OPS_READ),
                      ops_arg_dat(wk5, 1, stencil0, "double", OPS_WRITE));

         int iter_range9[] = {0, nx0, -2, nx1 + 2, -2, nx2 + 2};
         ops_par_loop_taylor_green_vortex_block0_9_kernel("D(u0 x0)", taylor_green_vortex_block, 3, iter_range9,
                      ops_arg_dat(u0, 1, stencil3, "double", OPS_READ),
                      ops_arg_dat(wk6, 1, stencil0, "double", OPS_WRITE));

         int iter_range10[] = {0, nx0, 0, nx1, 0, nx2};
         ops_par_loop_taylor_green_vortex_block0_10_kernel("D(u2 x2)", taylor_green_vortex_block, 3, iter_range10,
                      ops_arg_dat(u2, 1, stencil1, "double", OPS_READ),
                      ops_arg_dat(wk7, 1, stencil0, "double", OPS_WRITE));

         int iter_range11[] = {0, nx0, 0, nx1, 0, nx2};
         ops_par_loop_taylor_green_vortex_block0_11_kernel("D(u1[x0 x1 x2 t] x2)", taylor_green_vortex_block, 3, iter_range11,
                      ops_arg_dat(u1, 1, stencil1, "double", OPS_READ),
                      ops_arg_dat(wk8, 1, stencil0, "double", OPS_WRITE));

         int iter_range12[] = {0, nx0, 0, nx1, 0, nx2};
         ops_par_loop_taylor_green_vortex_block0_12_kernel("Residual of equation", taylor_green_vortex_block, 3, iter_range12,
                      ops_arg_dat(wk3, 1, stencil4, "double", OPS_READ),
                      ops_arg_dat(u0, 1, stencil5, "double", OPS_READ),
                      ops_arg_dat(rhoE, 1, stencil5, "double", OPS_READ),
                      ops_arg_dat(p, 1, stencil6, "double", OPS_READ),
                      ops_arg_dat(wk1, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(wk2, 1, stencil4, "double", OPS_READ),
                      ops_arg_dat(wk5, 1, stencil4, "double", OPS_READ),
                      ops_arg_dat(wk6, 1, stencil7, "double", OPS_READ),
                      ops_arg_dat(rho, 1, stencil5, "double", OPS_READ),
                      ops_arg_dat(rhou2, 1, stencil5, "double", OPS_READ),
                      ops_arg_dat(rhou1, 1, stencil5, "double", OPS_READ),
                      ops_arg_dat(wk4, 1, stencil8, "double", OPS_READ),
                      ops_arg_dat(rhou0, 1, stencil5, "double", OPS_READ),
                      ops_arg_dat(wk7, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(u1, 1, stencil5, "double", OPS_READ),
                      ops_arg_dat(u2, 1, stencil5, "double", OPS_READ),
                      ops_arg_dat(wk0, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(T, 1, stencil5, "double", OPS_READ),
                      ops_arg_dat(wk8, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(wk10, 1, stencil0, "double", OPS_WRITE),
                      ops_arg_dat(wk11, 1, stencil0, "double", OPS_WRITE),
                      ops_arg_dat(wk12, 1, stencil0, "double", OPS_WRITE),
                      ops_arg_dat(wk13, 1, stencil0, "double", OPS_WRITE),
                      ops_arg_dat(wk9, 1, stencil0, "double", OPS_WRITE));

         int iter_range13[] = {-2, nx0 + 2, -2, nx1 + 2, -2, nx2 + 2};
         ops_par_loop_taylor_green_vortex_block0_13_kernel("RK new (subloop) update", taylor_green_vortex_block, 3, iter_range13,
                      ops_arg_dat(wk11, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(wk12, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(rhou1_old, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(wk10, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(rhoE_old, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(wk9, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(rhou2_old, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(wk13, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(rhou0_old, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(rho_old, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(rhou1, 1, stencil0, "double", OPS_WRITE),
                      ops_arg_dat(rhoE, 1, stencil0, "double", OPS_WRITE),
                      ops_arg_dat(rho, 1, stencil0, "double", OPS_WRITE),
                      ops_arg_dat(rhou2, 1, stencil0, "double", OPS_WRITE),
                      ops_arg_dat(rhou0, 1, stencil0, "double", OPS_WRITE),
                      ops_arg_gbl(&rknew[stage], 1, "double", OPS_READ));

         int iter_range14[] = {-2, nx0 + 2, -2, nx1 + 2, -2, nx2 + 2};
         ops_par_loop_taylor_green_vortex_block0_14_kernel("RK old update", taylor_green_vortex_block, 3, iter_range14,
                      ops_arg_dat(wk11, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(wk12, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(wk10, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(wk9, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(wk13, 1, stencil0, "double", OPS_READ),
                      ops_arg_dat(rhou1_old, 1, stencil0, "double", OPS_RW),
                      ops_arg_dat(rhou2_old, 1, stencil0, "double", OPS_RW),
                      ops_arg_dat(rhou0_old, 1, stencil0, "double", OPS_RW),
                      ops_arg_dat(rho_old, 1, stencil0, "double", OPS_RW),
                      ops_arg_dat(rhoE_old, 1, stencil0, "double", OPS_RW),
                      ops_arg_gbl(&rkold[stage], 1, "double", OPS_READ));


         ops_halo_transfer(halo_exchange0);

         ops_halo_transfer(halo_exchange1);

         ops_halo_transfer(halo_exchange2);

         ops_halo_transfer(halo_exchange3);

         ops_halo_transfer(halo_exchange4);

         ops_halo_transfer(halo_exchange5);

      }

   }
   ops_printf("End of time iteration loop \nperformed %d iterations\n\n", niter);
   ops_printf("---------------------------------------------------------------------------\n");

   if (strcmp(type_of_simulation,"va") == 0){
       int iter_range17[] = {-2, nx0 + 2, -2, nx1 + 2,-2, nx2 + 2};
       ops_par_loop_taylor_green_vortex_block0_17_kernel("Non-Grouped Formula Evaluation", taylor_green_vortex_block, 3, iter_range17,
                    ops_arg_dat(rho, 1, stencil0, "double", OPS_READ),
                    ops_arg_dat(rhou0, 1, stencil0, "double", OPS_READ),
                    ops_arg_dat(rhou1, 1, stencil0, "double", OPS_READ),
                    ops_arg_dat(rhou2, 1, stencil0, "double", OPS_READ),
                    ops_arg_dat(u0, 1, stencil0, "double", OPS_WRITE),
                    ops_arg_dat(u1, 1, stencil0, "double", OPS_WRITE),
                    ops_arg_dat(u2, 1, stencil0, "double", OPS_WRITE));


       int iter_range18[] = {0, nx0, 0, nx1, 0, nx2};
       ops_par_loop_taylor_green_vortex_block0_18_kernel("Reduction equations", taylor_green_vortex_block, 3, iter_range18,
                    ops_arg_dat(u0, 1, stencil7, "double", OPS_READ),
                    ops_arg_dat(u1, 1, stencil9, "double", OPS_READ),
                    ops_arg_dat(u2, 1, stencil10, "double", OPS_READ),
                    ops_arg_dat(rho, 1, stencil0, "double", OPS_READ),
                    ops_arg_reduce(ke, 1, "double", OPS_INC),
                    ops_arg_reduce(enstrophy, 1, "double", OPS_INC),
                    ops_arg_reduce(rhomean, 1, "double", OPS_INC));

       double ke_reduction = 0.0;
       ops_reduction_result(ke, &ke_reduction);
       double enstrophy_reduction = 0.0;
       ops_reduction_result(enstrophy, &enstrophy_reduction);
       double rhomean_reduction = 0.0;
       ops_reduction_result(rhomean, &rhomean_reduction);
       ops_printf("\nThe following line should match with the one provided in the document for\nvalidation\n");
       ops_printf("%g, %g, %g, %g\n", (niter)*deltat, ke_reduction, enstrophy_reduction, rhomean_reduction);

   }

   double cpu_end, elapsed_end;
  ops_timers(&cpu_end, &elapsed_end);
   ops_timing_output(stderr);
   ops_printf("\nTimings are:\n");
   ops_printf("------------------Simulation time-----------------------------------------\n");
   ops_printf("Total Wall time of the time iteration loop for %d iterations, %lf\n",niter, elapsed_end-elapsed_start);
   ops_printf("Time taken for 1 iteration, %lf\n",(elapsed_end-elapsed_start)/niter);
   if (strcmp(HDF5op,"True") == 0){
    double cpu, tstart;
    ops_timers(&cpu, &tstart);
    ops_fetch_block_hdf5_file(taylor_green_vortex_block, "solution.h5");
    ops_fetch_dat_hdf5_file(rho, "solution.h5");
    ops_fetch_dat_hdf5_file(rhou0, "solution.h5");
    ops_fetch_dat_hdf5_file(rhou1, "solution.h5");
    ops_fetch_dat_hdf5_file(rhou2, "solution.h5");
    ops_fetch_dat_hdf5_file(rhoE, "solution.h5");
    double tend;
    ops_timers(&cpu, &tend);
    ops_timing_output(stderr);
    ops_printf("--------------HDF5 I/O selected and the timings are------------------------\n");
    ops_printf("Time taken for writing HDF5 File is %lf\n",tend-tstart);
   }
   else{
       ops_printf("\nNot performing file I/O as write HDF5 is set to False\n");
   }

   ops_exit();

}
