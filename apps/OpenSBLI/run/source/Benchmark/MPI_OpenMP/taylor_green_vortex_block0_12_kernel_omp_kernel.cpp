//
// auto-generated by ops.py
//
#ifdef _OPENMP
#include <omp.h>
#endif

//user function
inline
void taylor_green_vortex_block0_12_kernel(const double *wk3 , const double *u0 , const double *rhoE , const double *p , const double *wk1 , const double *wk2 , const double *wk5 , const double *wk6 , const double *rho , const double *rhou2 , const double *rhou1 , const double *wk4 , const double *rhou0 , const double *wk7 , const double *u1 , const double *u2 , const double *wk0 , const double *T , const double *wk8 , double *wk10 , double *wk11 , double *wk12 , double *wk13 , double *wk9)
{
    double temp_eval0 = rinv1*((rc2)*rhoE[OPS_ACC2(0,0,-2)] - rc3*rhoE[OPS_ACC2(0,0,-1)] + (rc3)*rhoE[OPS_ACC2(0,0,1)] - rc2*rhoE[OPS_ACC2(0,0,2)]);
    double temp_eval1 = rinv1*((rc2)*rhou1[OPS_ACC10(0,0,-2)] - rc3*rhou1[OPS_ACC10(0,0,-1)] + (rc3)*rhou1[OPS_ACC10(0,0,1)] - rc2*rhou1[OPS_ACC10(0,0,2)]);
    double temp_eval2 = rinv4*((rc2)*rhou0[OPS_ACC12(0,-2,0)] - rc3*rhou0[OPS_ACC12(0,-1,0)] + (rc3)*rhou0[OPS_ACC12(0,1,0)] - rc2*rhou0[OPS_ACC12(0,2,0)]);
    double temp_eval3 = rinv5*((rc2)*rhou2[OPS_ACC9(-2,0,0)] - rc3*rhou2[OPS_ACC9(-1,0,0)] + (rc3)*rhou2[OPS_ACC9(1,0,0)] - rc2*rhou2[OPS_ACC9(2,0,0)]);
    double temp_eval4 = rinv5*((rc2)*rhou1[OPS_ACC10(-2,0,0)] - rc3*rhou1[OPS_ACC10(-1,0,0)] + (rc3)*rhou1[OPS_ACC10(1,0,0)] - rc2*rhou1[OPS_ACC10(2,0,0)]);
    double temp_eval5 = rinv5*((rc2)*rhou0[OPS_ACC12(-2,0,0)] - rc3*rhou0[OPS_ACC12(-1,0,0)] + (rc3)*rhou0[OPS_ACC12(1,0,0)] - rc2*rhou0[OPS_ACC12(2,0,0)]);
    double temp_eval6 = rinv4*((rc2)*rho[OPS_ACC8(0,-2,0)]*u1[OPS_ACC14(0,-2,0)] - rc3*rho[OPS_ACC8(0,-1,0)]*u1[OPS_ACC14(0,-1,0)] + (rc3)*rho[OPS_ACC8(0,1,0)]*u1[OPS_ACC14(0,1,0)] - rc2*rho[OPS_ACC8(0,2,0)]*u1[OPS_ACC14(0,2,0)]);
    double temp_eval7 = rinv6*(-rc7*u0[OPS_ACC1(0,0,0)] - rc2*u0[OPS_ACC1(0,0,-2)] + (rc8)*u0[OPS_ACC1(0,0,-1)] + (rc8)*u0[OPS_ACC1(0,0,1)] - rc2*u0[OPS_ACC1(0,0,2)]);
    double temp_eval8 = rinv6*(-rc7*u2[OPS_ACC15(0,0,0)] - rc2*u2[OPS_ACC15(0,0,-2)] + (rc8)*u2[OPS_ACC15(0,0,-1)] + (rc8)*u2[OPS_ACC15(0,0,1)] - rc2*u2[OPS_ACC15(0,0,2)]);
    double temp_eval9 = rinv4*((rc2)*rho[OPS_ACC8(0,-2,0)] - rc3*rho[OPS_ACC8(0,-1,0)] + (rc3)*rho[OPS_ACC8(0,1,0)] - rc2*rho[OPS_ACC8(0,2,0)]);
    double temp_eval10 = rinv4*((rc2)*rhou0[OPS_ACC12(0,-2,0)]*u1[OPS_ACC14(0,-2,0)] - rc3*rhou0[OPS_ACC12(0,-1,0)]*u1[OPS_ACC14(0,-1,0)] + (rc3)*rhou0[OPS_ACC12(0,1,0)]*u1[OPS_ACC14(0,1,0)] - rc2*rhou0[OPS_ACC12(0,2,0)]*u1[OPS_ACC14(0,2,0)]);
    double temp_eval11 = rinv6*(-rc7*u1[OPS_ACC14(0,0,0)] - rc2*u1[OPS_ACC14(0,0,-2)] + (rc8)*u1[OPS_ACC14(0,0,-1)] + (rc8)*u1[OPS_ACC14(0,0,1)] - rc2*u1[OPS_ACC14(0,0,2)]);
    double temp_eval12 = rinv4*((rc2)*p[OPS_ACC3(0,-2,0)]*u1[OPS_ACC14(0,-2,0)] - rc3*p[OPS_ACC3(0,-1,0)]*u1[OPS_ACC14(0,-1,0)] + (rc3)*p[OPS_ACC3(0,1,0)]*u1[OPS_ACC14(0,1,0)] - rc2*p[OPS_ACC3(0,2,0)]*u1[OPS_ACC14(0,2,0)]);
    double temp_eval13 = rinv9*(-rc7*u2[OPS_ACC15(0,0,0)] - rc2*u2[OPS_ACC15(-2,0,0)] + (rc8)*u2[OPS_ACC15(-1,0,0)] + (rc8)*u2[OPS_ACC15(1,0,0)] - rc2*u2[OPS_ACC15(2,0,0)]);
    double temp_eval14 = rinv5*((rc2)*rhou1[OPS_ACC10(-2,0,0)]*u0[OPS_ACC1(-2,0,0)] - rc3*rhou1[OPS_ACC10(-1,0,0)]*u0[OPS_ACC1(-1,0,0)] + (rc3)*rhou1[OPS_ACC10(1,0,0)]*u0[OPS_ACC1(1,0,0)] - rc2*rhou1[OPS_ACC10(2,0,0)]*u0[OPS_ACC1(2,0,0)]);
    double temp_eval15 = rinv10*(-rc7*u0[OPS_ACC1(0,0,0)] - rc2*u0[OPS_ACC1(0,-2,0)] + (rc8)*u0[OPS_ACC1(0,-1,0)] + (rc8)*u0[OPS_ACC1(0,1,0)] - rc2*u0[OPS_ACC1(0,2,0)]);
    double temp_eval16 = rinv1*((rc2)*p[OPS_ACC3(0,0,-2)] - rc3*p[OPS_ACC3(0,0,-1)] + (rc3)*p[OPS_ACC3(0,0,1)] - rc2*p[OPS_ACC3(0,0,2)]);
    double temp_eval17 = rinv4*((rc2)*rhoE[OPS_ACC2(0,-2,0)]*u1[OPS_ACC14(0,-2,0)] - rc3*rhoE[OPS_ACC2(0,-1,0)]*u1[OPS_ACC14(0,-1,0)] + (rc3)*rhoE[OPS_ACC2(0,1,0)]*u1[OPS_ACC14(0,1,0)] - rc2*rhoE[OPS_ACC2(0,2,0)]*u1[OPS_ACC14(0,2,0)]);
    double temp_eval18 = rinv5*((rc2)*rho[OPS_ACC8(-2,0,0)] - rc3*rho[OPS_ACC8(-1,0,0)] + (rc3)*rho[OPS_ACC8(1,0,0)] - rc2*rho[OPS_ACC8(2,0,0)]);
    double temp_eval19 = rinv4*((rc2)*rhoE[OPS_ACC2(0,-2,0)] - rc3*rhoE[OPS_ACC2(0,-1,0)] + (rc3)*rhoE[OPS_ACC2(0,1,0)] - rc2*rhoE[OPS_ACC2(0,2,0)]);
    double temp_eval20 = rinv5*((rc2)*rho[OPS_ACC8(-2,0,0)]*u0[OPS_ACC1(-2,0,0)] - rc3*rho[OPS_ACC8(-1,0,0)]*u0[OPS_ACC1(-1,0,0)] + (rc3)*rho[OPS_ACC8(1,0,0)]*u0[OPS_ACC1(1,0,0)] - rc2*rho[OPS_ACC8(2,0,0)]*u0[OPS_ACC1(2,0,0)]);
    double temp_eval21 = rinv4*((rc2)*rhou1[OPS_ACC10(0,-2,0)] - rc3*rhou1[OPS_ACC10(0,-1,0)] + (rc3)*rhou1[OPS_ACC10(0,1,0)] - rc2*rhou1[OPS_ACC10(0,2,0)]);
    double temp_eval22 = rinv1*((rc2)*rho[OPS_ACC8(0,0,-2)]*u2[OPS_ACC15(0,0,-2)] - rc3*rho[OPS_ACC8(0,0,-1)]*u2[OPS_ACC15(0,0,-1)] + (rc3)*rho[OPS_ACC8(0,0,1)]*u2[OPS_ACC15(0,0,1)] - rc2*rho[OPS_ACC8(0,0,2)]*u2[OPS_ACC15(0,0,2)]);
    double temp_eval23 = rinv9*(-rc7*u0[OPS_ACC1(0,0,0)] - rc2*u0[OPS_ACC1(-2,0,0)] + (rc8)*u0[OPS_ACC1(-1,0,0)] + (rc8)*u0[OPS_ACC1(1,0,0)] - rc2*u0[OPS_ACC1(2,0,0)]);
    double temp_eval24 = rinv5*((rc2)*p[OPS_ACC3(-2,0,0)] - rc3*p[OPS_ACC3(-1,0,0)] + (rc3)*p[OPS_ACC3(1,0,0)] - rc2*p[OPS_ACC3(2,0,0)]);
    double temp_eval25 = rinv10*(-rc7*T[OPS_ACC17(0,0,0)] - rc2*T[OPS_ACC17(0,-2,0)] + (rc8)*T[OPS_ACC17(0,-1,0)] + (rc8)*T[OPS_ACC17(0,1,0)] - rc2*T[OPS_ACC17(0,2,0)]);
    double temp_eval26 = rinv1*((rc2)*rhou1[OPS_ACC10(0,0,-2)]*u2[OPS_ACC15(0,0,-2)] - rc3*rhou1[OPS_ACC10(0,0,-1)]*u2[OPS_ACC15(0,0,-1)] + (rc3)*rhou1[OPS_ACC10(0,0,1)]*u2[OPS_ACC15(0,0,1)] - rc2*rhou1[OPS_ACC10(0,0,2)]*u2[OPS_ACC15(0,0,2)]);
    double temp_eval27 = rinv1*((rc2)*p[OPS_ACC3(0,0,-2)]*u2[OPS_ACC15(0,0,-2)] - rc3*p[OPS_ACC3(0,0,-1)]*u2[OPS_ACC15(0,0,-1)] + (rc3)*p[OPS_ACC3(0,0,1)]*u2[OPS_ACC15(0,0,1)] - rc2*p[OPS_ACC3(0,0,2)]*u2[OPS_ACC15(0,0,2)]);
    double temp_eval28 = rinv10*(-rc7*u2[OPS_ACC15(0,0,0)] - rc2*u2[OPS_ACC15(0,-2,0)] + (rc8)*u2[OPS_ACC15(0,-1,0)] + (rc8)*u2[OPS_ACC15(0,1,0)] - rc2*u2[OPS_ACC15(0,2,0)]);
    double temp_eval29 = rinv5*((rc2)*rhoE[OPS_ACC2(-2,0,0)] - rc3*rhoE[OPS_ACC2(-1,0,0)] + (rc3)*rhoE[OPS_ACC2(1,0,0)] - rc2*rhoE[OPS_ACC2(2,0,0)]);
    double temp_eval30 = rinv1*((rc2)*rhou0[OPS_ACC12(0,0,-2)]*u2[OPS_ACC15(0,0,-2)] - rc3*rhou0[OPS_ACC12(0,0,-1)]*u2[OPS_ACC15(0,0,-1)] + (rc3)*rhou0[OPS_ACC12(0,0,1)]*u2[OPS_ACC15(0,0,1)] - rc2*rhou0[OPS_ACC12(0,0,2)]*u2[OPS_ACC15(0,0,2)]);
    double temp_eval31 = rinv1*((rc2)*rhou2[OPS_ACC9(0,0,-2)] - rc3*rhou2[OPS_ACC9(0,0,-1)] + (rc3)*rhou2[OPS_ACC9(0,0,1)] - rc2*rhou2[OPS_ACC9(0,0,2)]);
    double temp_eval32 = rinv10*(-rc7*u1[OPS_ACC14(0,0,0)] - rc2*u1[OPS_ACC14(0,-2,0)] + (rc8)*u1[OPS_ACC14(0,-1,0)] + (rc8)*u1[OPS_ACC14(0,1,0)] - rc2*u1[OPS_ACC14(0,2,0)]);
    double temp_eval33 = rinv4*((rc2)*p[OPS_ACC3(0,-2,0)] - rc3*p[OPS_ACC3(0,-1,0)] + (rc3)*p[OPS_ACC3(0,1,0)] - rc2*p[OPS_ACC3(0,2,0)]);
    double temp_eval34 = rinv4*((rc2)*rhou2[OPS_ACC9(0,-2,0)]*u1[OPS_ACC14(0,-2,0)] - rc3*rhou2[OPS_ACC9(0,-1,0)]*u1[OPS_ACC14(0,-1,0)] + (rc3)*rhou2[OPS_ACC9(0,1,0)]*u1[OPS_ACC14(0,1,0)] - rc2*rhou2[OPS_ACC9(0,2,0)]*u1[OPS_ACC14(0,2,0)]);
    double temp_eval35 = rinv9*(-rc7*u1[OPS_ACC14(0,0,0)] - rc2*u1[OPS_ACC14(-2,0,0)] + (rc8)*u1[OPS_ACC14(-1,0,0)] + (rc8)*u1[OPS_ACC14(1,0,0)] - rc2*u1[OPS_ACC14(2,0,0)]);
    double temp_eval36 = rinv5*((rc2)*rhou0[OPS_ACC12(-2,0,0)]*u0[OPS_ACC1(-2,0,0)] - rc3*rhou0[OPS_ACC12(-1,0,0)]*u0[OPS_ACC1(-1,0,0)] + (rc3)*rhou0[OPS_ACC12(1,0,0)]*u0[OPS_ACC1(1,0,0)] - rc2*rhou0[OPS_ACC12(2,0,0)]*u0[OPS_ACC1(2,0,0)]);
    double temp_eval37 = rinv6*(-rc7*T[OPS_ACC17(0,0,0)] - rc2*T[OPS_ACC17(0,0,-2)] + (rc8)*T[OPS_ACC17(0,0,-1)] + (rc8)*T[OPS_ACC17(0,0,1)] - rc2*T[OPS_ACC17(0,0,2)]);
    double temp_eval38 = rinv1*((rc2)*rho[OPS_ACC8(0,0,-2)] - rc3*rho[OPS_ACC8(0,0,-1)] + (rc3)*rho[OPS_ACC8(0,0,1)] - rc2*rho[OPS_ACC8(0,0,2)]);
    double temp_eval39 = rinv1*((rc2)*rhou2[OPS_ACC9(0,0,-2)]*u2[OPS_ACC15(0,0,-2)] - rc3*rhou2[OPS_ACC9(0,0,-1)]*u2[OPS_ACC15(0,0,-1)] + (rc3)*rhou2[OPS_ACC9(0,0,1)]*u2[OPS_ACC15(0,0,1)] - rc2*rhou2[OPS_ACC9(0,0,2)]*u2[OPS_ACC15(0,0,2)]);
    double temp_eval40 = rinv1*((rc2)*rhoE[OPS_ACC2(0,0,-2)]*u2[OPS_ACC15(0,0,-2)] - rc3*rhoE[OPS_ACC2(0,0,-1)]*u2[OPS_ACC15(0,0,-1)] + (rc3)*rhoE[OPS_ACC2(0,0,1)]*u2[OPS_ACC15(0,0,1)] - rc2*rhoE[OPS_ACC2(0,0,2)]*u2[OPS_ACC15(0,0,2)]);
    double temp_eval41 = rinv9*(-rc7*T[OPS_ACC17(0,0,0)] - rc2*T[OPS_ACC17(-2,0,0)] + (rc8)*T[OPS_ACC17(-1,0,0)] + (rc8)*T[OPS_ACC17(1,0,0)] - rc2*T[OPS_ACC17(2,0,0)]);
    double temp_eval42 = rinv5*((rc2)*rhou2[OPS_ACC9(-2,0,0)]*u0[OPS_ACC1(-2,0,0)] - rc3*rhou2[OPS_ACC9(-1,0,0)]*u0[OPS_ACC1(-1,0,0)] + (rc3)*rhou2[OPS_ACC9(1,0,0)]*u0[OPS_ACC1(1,0,0)] - rc2*rhou2[OPS_ACC9(2,0,0)]*u0[OPS_ACC1(2,0,0)]);
    double temp_eval43 = rinv5*((rc2)*rhoE[OPS_ACC2(-2,0,0)]*u0[OPS_ACC1(-2,0,0)] - rc3*rhoE[OPS_ACC2(-1,0,0)]*u0[OPS_ACC1(-1,0,0)] + (rc3)*rhoE[OPS_ACC2(1,0,0)]*u0[OPS_ACC1(1,0,0)] - rc2*rhoE[OPS_ACC2(2,0,0)]*u0[OPS_ACC1(2,0,0)]);
    double temp_eval44 = rinv5*((rc2)*p[OPS_ACC3(-2,0,0)]*u0[OPS_ACC1(-2,0,0)] - rc3*p[OPS_ACC3(-1,0,0)]*u0[OPS_ACC1(-1,0,0)] + (rc3)*p[OPS_ACC3(1,0,0)]*u0[OPS_ACC1(1,0,0)] - rc2*p[OPS_ACC3(2,0,0)]*u0[OPS_ACC1(2,0,0)]);
    double temp_eval45 = rinv4*((rc2)*rhou1[OPS_ACC10(0,-2,0)]*u1[OPS_ACC14(0,-2,0)] - rc3*rhou1[OPS_ACC10(0,-1,0)]*u1[OPS_ACC14(0,-1,0)] + (rc3)*rhou1[OPS_ACC10(0,1,0)]*u1[OPS_ACC14(0,1,0)] - rc2*rhou1[OPS_ACC10(0,2,0)]*u1[OPS_ACC14(0,2,0)]);
    double temp_eval46 = rinv4*((rc2)*rhou2[OPS_ACC9(0,-2,0)] - rc3*rhou2[OPS_ACC9(0,-1,0)] + (rc3)*rhou2[OPS_ACC9(0,1,0)] - rc2*rhou2[OPS_ACC9(0,2,0)]);
    double temp_eval47 = rinv1*((rc2)*rhou0[OPS_ACC12(0,0,-2)] - rc3*rhou0[OPS_ACC12(0,0,-1)] + (rc3)*rhou0[OPS_ACC12(0,0,1)] - rc2*rhou0[OPS_ACC12(0,0,2)]);
    double temp_eval48 = rinv4*((rc2)*wk6[OPS_ACC7(0,-2,0)] - rc3*wk6[OPS_ACC7(0,-1,0)] + (rc3)*wk6[OPS_ACC7(0,1,0)] - rc2*wk6[OPS_ACC7(0,2,0)]);
    double temp_eval49 = rinv1*((rc2)*wk5[OPS_ACC6(0,0,-2)] - rc3*wk5[OPS_ACC6(0,0,-1)] + (rc3)*wk5[OPS_ACC6(0,0,1)] - rc2*wk5[OPS_ACC6(0,0,2)]);
    double temp_eval50 = rinv4*((rc2)*wk4[OPS_ACC11(0,-2,0)] - rc3*wk4[OPS_ACC11(0,-1,0)] + (rc3)*wk4[OPS_ACC11(0,1,0)] - rc2*wk4[OPS_ACC11(0,2,0)]);
    double temp_eval51 = rinv1*((rc2)*wk3[OPS_ACC0(0,0,-2)] - rc3*wk3[OPS_ACC0(0,0,-1)] + (rc3)*wk3[OPS_ACC0(0,0,1)] - rc2*wk3[OPS_ACC0(0,0,2)]);
    double temp_eval52 = rinv1*((rc2)*wk6[OPS_ACC7(0,0,-2)] - rc3*wk6[OPS_ACC7(0,0,-1)] + (rc3)*wk6[OPS_ACC7(0,0,1)] - rc2*wk6[OPS_ACC7(0,0,2)]);
    double temp_eval53 = rinv1*((rc2)*wk2[OPS_ACC5(0,0,-2)] - rc3*wk2[OPS_ACC5(0,0,-1)] + (rc3)*wk2[OPS_ACC5(0,0,1)] - rc2*wk2[OPS_ACC5(0,0,2)]);

    wk9[OPS_ACC23(0,0,0)] = -0.5*temp_eval18*u0[OPS_ACC1(0,0,0)] - 0.5*temp_eval20 - 0.5*temp_eval22 - 0.5*temp_eval38*u2[OPS_ACC15(0,0,0)] - 0.5*temp_eval6 - 0.5*temp_eval9*u1[OPS_ACC14(0,0,0)] - 0.5*(wk3[OPS_ACC0(0,0,0)] + wk6[OPS_ACC7(0,0,0)] + wk7[OPS_ACC13(0,0,0)])*rho[OPS_ACC8(0,0,0)];

    wk10[OPS_ACC19(0,0,0)] = -0.5*temp_eval10 - 0.5*temp_eval2*u1[OPS_ACC14(0,0,0)] - temp_eval24 - 0.5*temp_eval30 - 0.5*temp_eval36 - 0.5*temp_eval47*u2[OPS_ACC15(0,0,0)] - 0.5*temp_eval5*u0[OPS_ACC1(0,0,0)] + rinv11*(temp_eval15 + temp_eval50) + rinv11*(temp_eval53 + temp_eval7) + rinv11*((rc8)*temp_eval23 - rc3*temp_eval50 - rc3*temp_eval53) - 0.5*(wk3[OPS_ACC0(0,0,0)] + wk6[OPS_ACC7(0,0,0)] + wk7[OPS_ACC13(0,0,0)])*rhou0[OPS_ACC12(0,0,0)];

    wk11[OPS_ACC20(0,0,0)] = -0.5*temp_eval1*u2[OPS_ACC15(0,0,0)] - 0.5*temp_eval14 - 0.5*temp_eval21*u1[OPS_ACC14(0,0,0)] - 0.5*temp_eval26 - temp_eval33 - 0.5*temp_eval4*u0[OPS_ACC1(0,0,0)] - 0.5*temp_eval45 + rinv11*(temp_eval11 + temp_eval49) + rinv11*(temp_eval35 + temp_eval48) + rinv11*((rc8)*temp_eval32 - rc3*temp_eval48 - rc3*temp_eval49) - 0.5*(wk3[OPS_ACC0(0,0,0)] + wk6[OPS_ACC7(0,0,0)] + wk7[OPS_ACC13(0,0,0)])*rhou1[OPS_ACC10(0,0,0)];

    wk12[OPS_ACC21(0,0,0)] = -temp_eval16 - 0.5*temp_eval3*u0[OPS_ACC1(0,0,0)] - 0.5*temp_eval31*u2[OPS_ACC15(0,0,0)] - 0.5*temp_eval34 - 0.5*temp_eval39 - 0.5*temp_eval42 - 0.5*temp_eval46*u1[OPS_ACC14(0,0,0)] + rinv11*(temp_eval13 + temp_eval52) + rinv11*(temp_eval28 + temp_eval51) + rinv11*(-rc3*temp_eval51 - rc3*temp_eval52 + (rc8)*temp_eval8) - 0.5*(wk3[OPS_ACC0(0,0,0)] + wk6[OPS_ACC7(0,0,0)] + wk7[OPS_ACC13(0,0,0)])*rhou2[OPS_ACC9(0,0,0)];

    wk13[OPS_ACC22(0,0,0)] = -0.5*temp_eval0*u2[OPS_ACC15(0,0,0)] - temp_eval12 - 0.5*temp_eval17 - 0.5*temp_eval19*u1[OPS_ACC14(0,0,0)] + temp_eval25*rinv11*rinv12*rinv13*rinv14 - temp_eval27 - 0.5*temp_eval29*u0[OPS_ACC1(0,0,0)] + temp_eval37*rinv11*rinv12*rinv13*rinv14 - 0.5*temp_eval40 + temp_eval41*rinv11*rinv12*rinv13*rinv14 - 0.5*temp_eval43 - temp_eval44 + rinv11*(temp_eval11 + temp_eval49)*u1[OPS_ACC14(0,0,0)] + rinv11*(temp_eval13 + temp_eval52)*u2[OPS_ACC15(0,0,0)] + rinv11*(temp_eval15 + temp_eval50)*u0[OPS_ACC1(0,0,0)] + rinv11*(temp_eval28 + temp_eval51)*u2[OPS_ACC15(0,0,0)] + rinv11*(temp_eval35 + temp_eval48)*u1[OPS_ACC14(0,0,0)] + rinv11*(temp_eval53 + temp_eval7)*u0[OPS_ACC1(0,0,0)] + rinv11*(wk0[OPS_ACC16(0,0,0)] + wk2[OPS_ACC5(0,0,0)])*wk0[OPS_ACC16(0,0,0)] + rinv11*(wk0[OPS_ACC16(0,0,0)] + wk2[OPS_ACC5(0,0,0)])*wk2[OPS_ACC5(0,0,0)] + rinv11*(wk1[OPS_ACC4(0,0,0)] + wk4[OPS_ACC11(0,0,0)])*wk1[OPS_ACC4(0,0,0)] + rinv11*(wk1[OPS_ACC4(0,0,0)] + wk4[OPS_ACC11(0,0,0)])*wk4[OPS_ACC11(0,0,0)] + rinv11*(wk5[OPS_ACC6(0,0,0)] + wk8[OPS_ACC18(0,0,0)])*wk5[OPS_ACC6(0,0,0)] + rinv11*(wk5[OPS_ACC6(0,0,0)] + wk8[OPS_ACC18(0,0,0)])*wk8[OPS_ACC18(0,0,0)] + rinv11*((rc8)*temp_eval23 - rc3*temp_eval50 - rc3*temp_eval53)*u0[OPS_ACC1(0,0,0)] + rinv11*((rc8)*temp_eval32 - rc3*temp_eval48 - rc3*temp_eval49)*u1[OPS_ACC14(0,0,0)] + rinv11*(-rc3*temp_eval51 - rc3*temp_eval52 + (rc8)*temp_eval8)*u2[OPS_ACC15(0,0,0)] + rinv11*(-rc3*wk3[OPS_ACC0(0,0,0)] - rc3*wk6[OPS_ACC7(0,0,0)] + (rc8)*wk7[OPS_ACC13(0,0,0)])*wk7[OPS_ACC13(0,0,0)] + rinv11*(-rc3*wk3[OPS_ACC0(0,0,0)] + (rc8)*wk6[OPS_ACC7(0,0,0)] - rc3*wk7[OPS_ACC13(0,0,0)])*wk6[OPS_ACC7(0,0,0)] + rinv11*((rc8)*wk3[OPS_ACC0(0,0,0)] - rc3*wk6[OPS_ACC7(0,0,0)] - rc3*wk7[OPS_ACC13(0,0,0)])*wk3[OPS_ACC0(0,0,0)] - 0.5*(wk3[OPS_ACC0(0,0,0)] + wk6[OPS_ACC7(0,0,0)] + wk7[OPS_ACC13(0,0,0)])*rhoE[OPS_ACC2(0,0,0)];
}





// host stub function
void ops_par_loop_taylor_green_vortex_block0_12_kernel(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18, ops_arg arg19,
 ops_arg arg20, ops_arg arg21, ops_arg arg22, ops_arg arg23) {

  //Timing
  double t1,t2,c1,c2;

  int  offs[24][3];
  ops_arg args[24] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23};



  #ifdef CHECKPOINTING
  if (!ops_checkpointing_before(args,24,range,12)) return;
  #endif

  if (OPS_diags > 1) {
    ops_timing_realloc(12,"taylor_green_vortex_block0_12_kernel");
    OPS_kernels[12].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block

  int start[3];
  int end[3];

  #ifdef OPS_MPI
  sub_block_list sb = OPS_sub_block_list[block->index];
  if (!sb->owned) return;
  for ( int n=0; n<3; n++ ){
    start[n] = sb->decomp_disp[n];end[n] = sb->decomp_disp[n]+sb->decomp_size[n];
    if (start[n] >= range[2*n]) {
      start[n] = 0;
    }
    else {
      start[n] = range[2*n] - start[n];
    }
    if (sb->id_m[n]==MPI_PROC_NULL && range[2*n] < 0) start[n] = range[2*n];
    if (end[n] >= range[2*n+1]) {
      end[n] = range[2*n+1] - sb->decomp_disp[n];
    }
    else {
      end[n] = sb->decomp_size[n];
    }
    if (sb->id_p[n]==MPI_PROC_NULL && (range[2*n+1] > sb->decomp_disp[n]+sb->decomp_size[n]))
      end[n] += (range[2*n+1]-sb->decomp_disp[n]-sb->decomp_size[n]);
  }
  #else //OPS_MPI
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #endif //OPS_MPI
  #ifdef OPS_DEBUG
  ops_register_args(args, "taylor_green_vortex_block0_12_kernel");
  #endif

  offs[0][0] = args[0].stencil->stride[0]*1;  //unit step in x dimension
  offs[0][1] = off3D(1, &start[0],
      &end[0],args[0].dat->size, args[0].stencil->stride) - offs[0][0];
  offs[0][2] = off3D(2, &start[0],
      &end[0],args[0].dat->size, args[0].stencil->stride) - offs[0][1] - offs[0][0];

  offs[1][0] = args[1].stencil->stride[0]*1;  //unit step in x dimension
  offs[1][1] = off3D(1, &start[0],
      &end[0],args[1].dat->size, args[1].stencil->stride) - offs[1][0];
  offs[1][2] = off3D(2, &start[0],
      &end[0],args[1].dat->size, args[1].stencil->stride) - offs[1][1] - offs[1][0];

  offs[2][0] = args[2].stencil->stride[0]*1;  //unit step in x dimension
  offs[2][1] = off3D(1, &start[0],
      &end[0],args[2].dat->size, args[2].stencil->stride) - offs[2][0];
  offs[2][2] = off3D(2, &start[0],
      &end[0],args[2].dat->size, args[2].stencil->stride) - offs[2][1] - offs[2][0];

  offs[3][0] = args[3].stencil->stride[0]*1;  //unit step in x dimension
  offs[3][1] = off3D(1, &start[0],
      &end[0],args[3].dat->size, args[3].stencil->stride) - offs[3][0];
  offs[3][2] = off3D(2, &start[0],
      &end[0],args[3].dat->size, args[3].stencil->stride) - offs[3][1] - offs[3][0];

  offs[4][0] = args[4].stencil->stride[0]*1;  //unit step in x dimension
  offs[4][1] = off3D(1, &start[0],
      &end[0],args[4].dat->size, args[4].stencil->stride) - offs[4][0];
  offs[4][2] = off3D(2, &start[0],
      &end[0],args[4].dat->size, args[4].stencil->stride) - offs[4][1] - offs[4][0];

  offs[5][0] = args[5].stencil->stride[0]*1;  //unit step in x dimension
  offs[5][1] = off3D(1, &start[0],
      &end[0],args[5].dat->size, args[5].stencil->stride) - offs[5][0];
  offs[5][2] = off3D(2, &start[0],
      &end[0],args[5].dat->size, args[5].stencil->stride) - offs[5][1] - offs[5][0];

  offs[6][0] = args[6].stencil->stride[0]*1;  //unit step in x dimension
  offs[6][1] = off3D(1, &start[0],
      &end[0],args[6].dat->size, args[6].stencil->stride) - offs[6][0];
  offs[6][2] = off3D(2, &start[0],
      &end[0],args[6].dat->size, args[6].stencil->stride) - offs[6][1] - offs[6][0];

  offs[7][0] = args[7].stencil->stride[0]*1;  //unit step in x dimension
  offs[7][1] = off3D(1, &start[0],
      &end[0],args[7].dat->size, args[7].stencil->stride) - offs[7][0];
  offs[7][2] = off3D(2, &start[0],
      &end[0],args[7].dat->size, args[7].stencil->stride) - offs[7][1] - offs[7][0];

  offs[8][0] = args[8].stencil->stride[0]*1;  //unit step in x dimension
  offs[8][1] = off3D(1, &start[0],
      &end[0],args[8].dat->size, args[8].stencil->stride) - offs[8][0];
  offs[8][2] = off3D(2, &start[0],
      &end[0],args[8].dat->size, args[8].stencil->stride) - offs[8][1] - offs[8][0];

  offs[9][0] = args[9].stencil->stride[0]*1;  //unit step in x dimension
  offs[9][1] = off3D(1, &start[0],
      &end[0],args[9].dat->size, args[9].stencil->stride) - offs[9][0];
  offs[9][2] = off3D(2, &start[0],
      &end[0],args[9].dat->size, args[9].stencil->stride) - offs[9][1] - offs[9][0];

  offs[10][0] = args[10].stencil->stride[0]*1;  //unit step in x dimension
  offs[10][1] = off3D(1, &start[0],
      &end[0],args[10].dat->size, args[10].stencil->stride) - offs[10][0];
  offs[10][2] = off3D(2, &start[0],
      &end[0],args[10].dat->size, args[10].stencil->stride) - offs[10][1] - offs[10][0];

  offs[11][0] = args[11].stencil->stride[0]*1;  //unit step in x dimension
  offs[11][1] = off3D(1, &start[0],
      &end[0],args[11].dat->size, args[11].stencil->stride) - offs[11][0];
  offs[11][2] = off3D(2, &start[0],
      &end[0],args[11].dat->size, args[11].stencil->stride) - offs[11][1] - offs[11][0];

  offs[12][0] = args[12].stencil->stride[0]*1;  //unit step in x dimension
  offs[12][1] = off3D(1, &start[0],
      &end[0],args[12].dat->size, args[12].stencil->stride) - offs[12][0];
  offs[12][2] = off3D(2, &start[0],
      &end[0],args[12].dat->size, args[12].stencil->stride) - offs[12][1] - offs[12][0];

  offs[13][0] = args[13].stencil->stride[0]*1;  //unit step in x dimension
  offs[13][1] = off3D(1, &start[0],
      &end[0],args[13].dat->size, args[13].stencil->stride) - offs[13][0];
  offs[13][2] = off3D(2, &start[0],
      &end[0],args[13].dat->size, args[13].stencil->stride) - offs[13][1] - offs[13][0];

  offs[14][0] = args[14].stencil->stride[0]*1;  //unit step in x dimension
  offs[14][1] = off3D(1, &start[0],
      &end[0],args[14].dat->size, args[14].stencil->stride) - offs[14][0];
  offs[14][2] = off3D(2, &start[0],
      &end[0],args[14].dat->size, args[14].stencil->stride) - offs[14][1] - offs[14][0];

  offs[15][0] = args[15].stencil->stride[0]*1;  //unit step in x dimension
  offs[15][1] = off3D(1, &start[0],
      &end[0],args[15].dat->size, args[15].stencil->stride) - offs[15][0];
  offs[15][2] = off3D(2, &start[0],
      &end[0],args[15].dat->size, args[15].stencil->stride) - offs[15][1] - offs[15][0];

  offs[16][0] = args[16].stencil->stride[0]*1;  //unit step in x dimension
  offs[16][1] = off3D(1, &start[0],
      &end[0],args[16].dat->size, args[16].stencil->stride) - offs[16][0];
  offs[16][2] = off3D(2, &start[0],
      &end[0],args[16].dat->size, args[16].stencil->stride) - offs[16][1] - offs[16][0];

  offs[17][0] = args[17].stencil->stride[0]*1;  //unit step in x dimension
  offs[17][1] = off3D(1, &start[0],
      &end[0],args[17].dat->size, args[17].stencil->stride) - offs[17][0];
  offs[17][2] = off3D(2, &start[0],
      &end[0],args[17].dat->size, args[17].stencil->stride) - offs[17][1] - offs[17][0];

  offs[18][0] = args[18].stencil->stride[0]*1;  //unit step in x dimension
  offs[18][1] = off3D(1, &start[0],
      &end[0],args[18].dat->size, args[18].stencil->stride) - offs[18][0];
  offs[18][2] = off3D(2, &start[0],
      &end[0],args[18].dat->size, args[18].stencil->stride) - offs[18][1] - offs[18][0];

  offs[19][0] = args[19].stencil->stride[0]*1;  //unit step in x dimension
  offs[19][1] = off3D(1, &start[0],
      &end[0],args[19].dat->size, args[19].stencil->stride) - offs[19][0];
  offs[19][2] = off3D(2, &start[0],
      &end[0],args[19].dat->size, args[19].stencil->stride) - offs[19][1] - offs[19][0];

  offs[20][0] = args[20].stencil->stride[0]*1;  //unit step in x dimension
  offs[20][1] = off3D(1, &start[0],
      &end[0],args[20].dat->size, args[20].stencil->stride) - offs[20][0];
  offs[20][2] = off3D(2, &start[0],
      &end[0],args[20].dat->size, args[20].stencil->stride) - offs[20][1] - offs[20][0];

  offs[21][0] = args[21].stencil->stride[0]*1;  //unit step in x dimension
  offs[21][1] = off3D(1, &start[0],
      &end[0],args[21].dat->size, args[21].stencil->stride) - offs[21][0];
  offs[21][2] = off3D(2, &start[0],
      &end[0],args[21].dat->size, args[21].stencil->stride) - offs[21][1] - offs[21][0];

  offs[22][0] = args[22].stencil->stride[0]*1;  //unit step in x dimension
  offs[22][1] = off3D(1, &start[0],
      &end[0],args[22].dat->size, args[22].stencil->stride) - offs[22][0];
  offs[22][2] = off3D(2, &start[0],
      &end[0],args[22].dat->size, args[22].stencil->stride) - offs[22][1] - offs[22][0];

  offs[23][0] = args[23].stencil->stride[0]*1;  //unit step in x dimension
  offs[23][1] = off3D(1, &start[0],
      &end[0],args[23].dat->size, args[23].stencil->stride) - offs[23][0];
  offs[23][2] = off3D(2, &start[0],
      &end[0],args[23].dat->size, args[23].stencil->stride) - offs[23][1] - offs[23][0];



  int off0_0 = offs[0][0];
  int off0_1 = offs[0][1];
  int off0_2 = offs[0][2];
  int dat0 = args[0].dat->elem_size;
  int off1_0 = offs[1][0];
  int off1_1 = offs[1][1];
  int off1_2 = offs[1][2];
  int dat1 = args[1].dat->elem_size;
  int off2_0 = offs[2][0];
  int off2_1 = offs[2][1];
  int off2_2 = offs[2][2];
  int dat2 = args[2].dat->elem_size;
  int off3_0 = offs[3][0];
  int off3_1 = offs[3][1];
  int off3_2 = offs[3][2];
  int dat3 = args[3].dat->elem_size;
  int off4_0 = offs[4][0];
  int off4_1 = offs[4][1];
  int off4_2 = offs[4][2];
  int dat4 = args[4].dat->elem_size;
  int off5_0 = offs[5][0];
  int off5_1 = offs[5][1];
  int off5_2 = offs[5][2];
  int dat5 = args[5].dat->elem_size;
  int off6_0 = offs[6][0];
  int off6_1 = offs[6][1];
  int off6_2 = offs[6][2];
  int dat6 = args[6].dat->elem_size;
  int off7_0 = offs[7][0];
  int off7_1 = offs[7][1];
  int off7_2 = offs[7][2];
  int dat7 = args[7].dat->elem_size;
  int off8_0 = offs[8][0];
  int off8_1 = offs[8][1];
  int off8_2 = offs[8][2];
  int dat8 = args[8].dat->elem_size;
  int off9_0 = offs[9][0];
  int off9_1 = offs[9][1];
  int off9_2 = offs[9][2];
  int dat9 = args[9].dat->elem_size;
  int off10_0 = offs[10][0];
  int off10_1 = offs[10][1];
  int off10_2 = offs[10][2];
  int dat10 = args[10].dat->elem_size;
  int off11_0 = offs[11][0];
  int off11_1 = offs[11][1];
  int off11_2 = offs[11][2];
  int dat11 = args[11].dat->elem_size;
  int off12_0 = offs[12][0];
  int off12_1 = offs[12][1];
  int off12_2 = offs[12][2];
  int dat12 = args[12].dat->elem_size;
  int off13_0 = offs[13][0];
  int off13_1 = offs[13][1];
  int off13_2 = offs[13][2];
  int dat13 = args[13].dat->elem_size;
  int off14_0 = offs[14][0];
  int off14_1 = offs[14][1];
  int off14_2 = offs[14][2];
  int dat14 = args[14].dat->elem_size;
  int off15_0 = offs[15][0];
  int off15_1 = offs[15][1];
  int off15_2 = offs[15][2];
  int dat15 = args[15].dat->elem_size;
  int off16_0 = offs[16][0];
  int off16_1 = offs[16][1];
  int off16_2 = offs[16][2];
  int dat16 = args[16].dat->elem_size;
  int off17_0 = offs[17][0];
  int off17_1 = offs[17][1];
  int off17_2 = offs[17][2];
  int dat17 = args[17].dat->elem_size;
  int off18_0 = offs[18][0];
  int off18_1 = offs[18][1];
  int off18_2 = offs[18][2];
  int dat18 = args[18].dat->elem_size;
  int off19_0 = offs[19][0];
  int off19_1 = offs[19][1];
  int off19_2 = offs[19][2];
  int dat19 = args[19].dat->elem_size;
  int off20_0 = offs[20][0];
  int off20_1 = offs[20][1];
  int off20_2 = offs[20][2];
  int dat20 = args[20].dat->elem_size;
  int off21_0 = offs[21][0];
  int off21_1 = offs[21][1];
  int off21_2 = offs[21][2];
  int dat21 = args[21].dat->elem_size;
  int off22_0 = offs[22][0];
  int off22_1 = offs[22][1];
  int off22_2 = offs[22][2];
  int dat22 = args[22].dat->elem_size;
  int off23_0 = offs[23][0];
  int off23_1 = offs[23][1];
  int off23_2 = offs[23][2];
  int dat23 = args[23].dat->elem_size;

  //Halo Exchanges
  ops_H_D_exchanges_host(args, 24);
  ops_halo_exchanges(args,24,range);
  ops_H_D_exchanges_host(args, 24);

  #ifdef _OPENMP
  int nthreads = omp_get_max_threads( );
  #else
  int nthreads = 1;
  #endif
  xdim0 = args[0].dat->size[0];
  ydim0 = args[0].dat->size[1];
  xdim1 = args[1].dat->size[0];
  ydim1 = args[1].dat->size[1];
  xdim2 = args[2].dat->size[0];
  ydim2 = args[2].dat->size[1];
  xdim3 = args[3].dat->size[0];
  ydim3 = args[3].dat->size[1];
  xdim4 = args[4].dat->size[0];
  ydim4 = args[4].dat->size[1];
  xdim5 = args[5].dat->size[0];
  ydim5 = args[5].dat->size[1];
  xdim6 = args[6].dat->size[0];
  ydim6 = args[6].dat->size[1];
  xdim7 = args[7].dat->size[0];
  ydim7 = args[7].dat->size[1];
  xdim8 = args[8].dat->size[0];
  ydim8 = args[8].dat->size[1];
  xdim9 = args[9].dat->size[0];
  ydim9 = args[9].dat->size[1];
  xdim10 = args[10].dat->size[0];
  ydim10 = args[10].dat->size[1];
  xdim11 = args[11].dat->size[0];
  ydim11 = args[11].dat->size[1];
  xdim12 = args[12].dat->size[0];
  ydim12 = args[12].dat->size[1];
  xdim13 = args[13].dat->size[0];
  ydim13 = args[13].dat->size[1];
  xdim14 = args[14].dat->size[0];
  ydim14 = args[14].dat->size[1];
  xdim15 = args[15].dat->size[0];
  ydim15 = args[15].dat->size[1];
  xdim16 = args[16].dat->size[0];
  ydim16 = args[16].dat->size[1];
  xdim17 = args[17].dat->size[0];
  ydim17 = args[17].dat->size[1];
  xdim18 = args[18].dat->size[0];
  ydim18 = args[18].dat->size[1];
  xdim19 = args[19].dat->size[0];
  ydim19 = args[19].dat->size[1];
  xdim20 = args[20].dat->size[0];
  ydim20 = args[20].dat->size[1];
  xdim21 = args[21].dat->size[0];
  ydim21 = args[21].dat->size[1];
  xdim22 = args[22].dat->size[0];
  ydim22 = args[22].dat->size[1];
  xdim23 = args[23].dat->size[0];
  ydim23 = args[23].dat->size[1];


  if (OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    OPS_kernels[12].mpi_time += t2-t1;
  }


  #pragma omp parallel for
  for ( int thr=0; thr<nthreads; thr++ ){

    int z_size = end[2]-start[2];
    char *p_a[24];

    int start_i = start[2] + ((z_size-1)/nthreads+1)*thr;
    int finish_i = start[2] + MIN(((z_size-1)/nthreads+1)*(thr+1),z_size);

    //get address per thread
    int start0 = start[0];
    int start1 = start[1];
    int start2 = start_i;

    //set up initial pointers
    int d_m[OPS_MAX_DIM];
    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[0].dat->d_m[d] + OPS_sub_dat_list[args[0].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[0].dat->d_m[d];
    #endif //OPS_MPI
    int base0 = dat0 * 1 *
    (start0 * args[0].stencil->stride[0] - args[0].dat->base[0] - d_m[0]);
    base0 = base0+ dat0 *
      args[0].dat->size[0] *
      (start1 * args[0].stencil->stride[1] - args[0].dat->base[1] - d_m[1]);
    base0 = base0+ dat0 *
      args[0].dat->size[0] *
      args[0].dat->size[1] *
      (start2 * args[0].stencil->stride[2] - args[0].dat->base[2] - d_m[2]);
    p_a[0] = (char *)args[0].data + base0;

    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[1].dat->d_m[d] + OPS_sub_dat_list[args[1].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[1].dat->d_m[d];
    #endif //OPS_MPI
    int base1 = dat1 * 1 *
    (start0 * args[1].stencil->stride[0] - args[1].dat->base[0] - d_m[0]);
    base1 = base1+ dat1 *
      args[1].dat->size[0] *
      (start1 * args[1].stencil->stride[1] - args[1].dat->base[1] - d_m[1]);
    base1 = base1+ dat1 *
      args[1].dat->size[0] *
      args[1].dat->size[1] *
      (start2 * args[1].stencil->stride[2] - args[1].dat->base[2] - d_m[2]);
    p_a[1] = (char *)args[1].data + base1;

    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[2].dat->d_m[d] + OPS_sub_dat_list[args[2].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[2].dat->d_m[d];
    #endif //OPS_MPI
    int base2 = dat2 * 1 *
    (start0 * args[2].stencil->stride[0] - args[2].dat->base[0] - d_m[0]);
    base2 = base2+ dat2 *
      args[2].dat->size[0] *
      (start1 * args[2].stencil->stride[1] - args[2].dat->base[1] - d_m[1]);
    base2 = base2+ dat2 *
      args[2].dat->size[0] *
      args[2].dat->size[1] *
      (start2 * args[2].stencil->stride[2] - args[2].dat->base[2] - d_m[2]);
    p_a[2] = (char *)args[2].data + base2;

    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[3].dat->d_m[d] + OPS_sub_dat_list[args[3].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[3].dat->d_m[d];
    #endif //OPS_MPI
    int base3 = dat3 * 1 *
    (start0 * args[3].stencil->stride[0] - args[3].dat->base[0] - d_m[0]);
    base3 = base3+ dat3 *
      args[3].dat->size[0] *
      (start1 * args[3].stencil->stride[1] - args[3].dat->base[1] - d_m[1]);
    base3 = base3+ dat3 *
      args[3].dat->size[0] *
      args[3].dat->size[1] *
      (start2 * args[3].stencil->stride[2] - args[3].dat->base[2] - d_m[2]);
    p_a[3] = (char *)args[3].data + base3;

    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[4].dat->d_m[d] + OPS_sub_dat_list[args[4].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[4].dat->d_m[d];
    #endif //OPS_MPI
    int base4 = dat4 * 1 *
    (start0 * args[4].stencil->stride[0] - args[4].dat->base[0] - d_m[0]);
    base4 = base4+ dat4 *
      args[4].dat->size[0] *
      (start1 * args[4].stencil->stride[1] - args[4].dat->base[1] - d_m[1]);
    base4 = base4+ dat4 *
      args[4].dat->size[0] *
      args[4].dat->size[1] *
      (start2 * args[4].stencil->stride[2] - args[4].dat->base[2] - d_m[2]);
    p_a[4] = (char *)args[4].data + base4;

    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[5].dat->d_m[d] + OPS_sub_dat_list[args[5].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[5].dat->d_m[d];
    #endif //OPS_MPI
    int base5 = dat5 * 1 *
    (start0 * args[5].stencil->stride[0] - args[5].dat->base[0] - d_m[0]);
    base5 = base5+ dat5 *
      args[5].dat->size[0] *
      (start1 * args[5].stencil->stride[1] - args[5].dat->base[1] - d_m[1]);
    base5 = base5+ dat5 *
      args[5].dat->size[0] *
      args[5].dat->size[1] *
      (start2 * args[5].stencil->stride[2] - args[5].dat->base[2] - d_m[2]);
    p_a[5] = (char *)args[5].data + base5;

    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[6].dat->d_m[d] + OPS_sub_dat_list[args[6].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[6].dat->d_m[d];
    #endif //OPS_MPI
    int base6 = dat6 * 1 *
    (start0 * args[6].stencil->stride[0] - args[6].dat->base[0] - d_m[0]);
    base6 = base6+ dat6 *
      args[6].dat->size[0] *
      (start1 * args[6].stencil->stride[1] - args[6].dat->base[1] - d_m[1]);
    base6 = base6+ dat6 *
      args[6].dat->size[0] *
      args[6].dat->size[1] *
      (start2 * args[6].stencil->stride[2] - args[6].dat->base[2] - d_m[2]);
    p_a[6] = (char *)args[6].data + base6;

    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[7].dat->d_m[d] + OPS_sub_dat_list[args[7].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[7].dat->d_m[d];
    #endif //OPS_MPI
    int base7 = dat7 * 1 *
    (start0 * args[7].stencil->stride[0] - args[7].dat->base[0] - d_m[0]);
    base7 = base7+ dat7 *
      args[7].dat->size[0] *
      (start1 * args[7].stencil->stride[1] - args[7].dat->base[1] - d_m[1]);
    base7 = base7+ dat7 *
      args[7].dat->size[0] *
      args[7].dat->size[1] *
      (start2 * args[7].stencil->stride[2] - args[7].dat->base[2] - d_m[2]);
    p_a[7] = (char *)args[7].data + base7;

    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[8].dat->d_m[d] + OPS_sub_dat_list[args[8].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[8].dat->d_m[d];
    #endif //OPS_MPI
    int base8 = dat8 * 1 *
    (start0 * args[8].stencil->stride[0] - args[8].dat->base[0] - d_m[0]);
    base8 = base8+ dat8 *
      args[8].dat->size[0] *
      (start1 * args[8].stencil->stride[1] - args[8].dat->base[1] - d_m[1]);
    base8 = base8+ dat8 *
      args[8].dat->size[0] *
      args[8].dat->size[1] *
      (start2 * args[8].stencil->stride[2] - args[8].dat->base[2] - d_m[2]);
    p_a[8] = (char *)args[8].data + base8;

    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[9].dat->d_m[d] + OPS_sub_dat_list[args[9].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[9].dat->d_m[d];
    #endif //OPS_MPI
    int base9 = dat9 * 1 *
    (start0 * args[9].stencil->stride[0] - args[9].dat->base[0] - d_m[0]);
    base9 = base9+ dat9 *
      args[9].dat->size[0] *
      (start1 * args[9].stencil->stride[1] - args[9].dat->base[1] - d_m[1]);
    base9 = base9+ dat9 *
      args[9].dat->size[0] *
      args[9].dat->size[1] *
      (start2 * args[9].stencil->stride[2] - args[9].dat->base[2] - d_m[2]);
    p_a[9] = (char *)args[9].data + base9;

    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[10].dat->d_m[d] + OPS_sub_dat_list[args[10].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[10].dat->d_m[d];
    #endif //OPS_MPI
    int base10 = dat10 * 1 *
    (start0 * args[10].stencil->stride[0] - args[10].dat->base[0] - d_m[0]);
    base10 = base10+ dat10 *
      args[10].dat->size[0] *
      (start1 * args[10].stencil->stride[1] - args[10].dat->base[1] - d_m[1]);
    base10 = base10+ dat10 *
      args[10].dat->size[0] *
      args[10].dat->size[1] *
      (start2 * args[10].stencil->stride[2] - args[10].dat->base[2] - d_m[2]);
    p_a[10] = (char *)args[10].data + base10;

    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[11].dat->d_m[d] + OPS_sub_dat_list[args[11].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[11].dat->d_m[d];
    #endif //OPS_MPI
    int base11 = dat11 * 1 *
    (start0 * args[11].stencil->stride[0] - args[11].dat->base[0] - d_m[0]);
    base11 = base11+ dat11 *
      args[11].dat->size[0] *
      (start1 * args[11].stencil->stride[1] - args[11].dat->base[1] - d_m[1]);
    base11 = base11+ dat11 *
      args[11].dat->size[0] *
      args[11].dat->size[1] *
      (start2 * args[11].stencil->stride[2] - args[11].dat->base[2] - d_m[2]);
    p_a[11] = (char *)args[11].data + base11;

    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[12].dat->d_m[d] + OPS_sub_dat_list[args[12].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[12].dat->d_m[d];
    #endif //OPS_MPI
    int base12 = dat12 * 1 *
    (start0 * args[12].stencil->stride[0] - args[12].dat->base[0] - d_m[0]);
    base12 = base12+ dat12 *
      args[12].dat->size[0] *
      (start1 * args[12].stencil->stride[1] - args[12].dat->base[1] - d_m[1]);
    base12 = base12+ dat12 *
      args[12].dat->size[0] *
      args[12].dat->size[1] *
      (start2 * args[12].stencil->stride[2] - args[12].dat->base[2] - d_m[2]);
    p_a[12] = (char *)args[12].data + base12;

    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[13].dat->d_m[d] + OPS_sub_dat_list[args[13].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[13].dat->d_m[d];
    #endif //OPS_MPI
    int base13 = dat13 * 1 *
    (start0 * args[13].stencil->stride[0] - args[13].dat->base[0] - d_m[0]);
    base13 = base13+ dat13 *
      args[13].dat->size[0] *
      (start1 * args[13].stencil->stride[1] - args[13].dat->base[1] - d_m[1]);
    base13 = base13+ dat13 *
      args[13].dat->size[0] *
      args[13].dat->size[1] *
      (start2 * args[13].stencil->stride[2] - args[13].dat->base[2] - d_m[2]);
    p_a[13] = (char *)args[13].data + base13;

    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[14].dat->d_m[d] + OPS_sub_dat_list[args[14].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[14].dat->d_m[d];
    #endif //OPS_MPI
    int base14 = dat14 * 1 *
    (start0 * args[14].stencil->stride[0] - args[14].dat->base[0] - d_m[0]);
    base14 = base14+ dat14 *
      args[14].dat->size[0] *
      (start1 * args[14].stencil->stride[1] - args[14].dat->base[1] - d_m[1]);
    base14 = base14+ dat14 *
      args[14].dat->size[0] *
      args[14].dat->size[1] *
      (start2 * args[14].stencil->stride[2] - args[14].dat->base[2] - d_m[2]);
    p_a[14] = (char *)args[14].data + base14;

    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[15].dat->d_m[d] + OPS_sub_dat_list[args[15].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[15].dat->d_m[d];
    #endif //OPS_MPI
    int base15 = dat15 * 1 *
    (start0 * args[15].stencil->stride[0] - args[15].dat->base[0] - d_m[0]);
    base15 = base15+ dat15 *
      args[15].dat->size[0] *
      (start1 * args[15].stencil->stride[1] - args[15].dat->base[1] - d_m[1]);
    base15 = base15+ dat15 *
      args[15].dat->size[0] *
      args[15].dat->size[1] *
      (start2 * args[15].stencil->stride[2] - args[15].dat->base[2] - d_m[2]);
    p_a[15] = (char *)args[15].data + base15;

    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[16].dat->d_m[d] + OPS_sub_dat_list[args[16].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[16].dat->d_m[d];
    #endif //OPS_MPI
    int base16 = dat16 * 1 *
    (start0 * args[16].stencil->stride[0] - args[16].dat->base[0] - d_m[0]);
    base16 = base16+ dat16 *
      args[16].dat->size[0] *
      (start1 * args[16].stencil->stride[1] - args[16].dat->base[1] - d_m[1]);
    base16 = base16+ dat16 *
      args[16].dat->size[0] *
      args[16].dat->size[1] *
      (start2 * args[16].stencil->stride[2] - args[16].dat->base[2] - d_m[2]);
    p_a[16] = (char *)args[16].data + base16;

    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[17].dat->d_m[d] + OPS_sub_dat_list[args[17].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[17].dat->d_m[d];
    #endif //OPS_MPI
    int base17 = dat17 * 1 *
    (start0 * args[17].stencil->stride[0] - args[17].dat->base[0] - d_m[0]);
    base17 = base17+ dat17 *
      args[17].dat->size[0] *
      (start1 * args[17].stencil->stride[1] - args[17].dat->base[1] - d_m[1]);
    base17 = base17+ dat17 *
      args[17].dat->size[0] *
      args[17].dat->size[1] *
      (start2 * args[17].stencil->stride[2] - args[17].dat->base[2] - d_m[2]);
    p_a[17] = (char *)args[17].data + base17;

    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[18].dat->d_m[d] + OPS_sub_dat_list[args[18].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[18].dat->d_m[d];
    #endif //OPS_MPI
    int base18 = dat18 * 1 *
    (start0 * args[18].stencil->stride[0] - args[18].dat->base[0] - d_m[0]);
    base18 = base18+ dat18 *
      args[18].dat->size[0] *
      (start1 * args[18].stencil->stride[1] - args[18].dat->base[1] - d_m[1]);
    base18 = base18+ dat18 *
      args[18].dat->size[0] *
      args[18].dat->size[1] *
      (start2 * args[18].stencil->stride[2] - args[18].dat->base[2] - d_m[2]);
    p_a[18] = (char *)args[18].data + base18;

    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[19].dat->d_m[d] + OPS_sub_dat_list[args[19].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[19].dat->d_m[d];
    #endif //OPS_MPI
    int base19 = dat19 * 1 *
    (start0 * args[19].stencil->stride[0] - args[19].dat->base[0] - d_m[0]);
    base19 = base19+ dat19 *
      args[19].dat->size[0] *
      (start1 * args[19].stencil->stride[1] - args[19].dat->base[1] - d_m[1]);
    base19 = base19+ dat19 *
      args[19].dat->size[0] *
      args[19].dat->size[1] *
      (start2 * args[19].stencil->stride[2] - args[19].dat->base[2] - d_m[2]);
    p_a[19] = (char *)args[19].data + base19;

    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[20].dat->d_m[d] + OPS_sub_dat_list[args[20].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[20].dat->d_m[d];
    #endif //OPS_MPI
    int base20 = dat20 * 1 *
    (start0 * args[20].stencil->stride[0] - args[20].dat->base[0] - d_m[0]);
    base20 = base20+ dat20 *
      args[20].dat->size[0] *
      (start1 * args[20].stencil->stride[1] - args[20].dat->base[1] - d_m[1]);
    base20 = base20+ dat20 *
      args[20].dat->size[0] *
      args[20].dat->size[1] *
      (start2 * args[20].stencil->stride[2] - args[20].dat->base[2] - d_m[2]);
    p_a[20] = (char *)args[20].data + base20;

    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[21].dat->d_m[d] + OPS_sub_dat_list[args[21].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[21].dat->d_m[d];
    #endif //OPS_MPI
    int base21 = dat21 * 1 *
    (start0 * args[21].stencil->stride[0] - args[21].dat->base[0] - d_m[0]);
    base21 = base21+ dat21 *
      args[21].dat->size[0] *
      (start1 * args[21].stencil->stride[1] - args[21].dat->base[1] - d_m[1]);
    base21 = base21+ dat21 *
      args[21].dat->size[0] *
      args[21].dat->size[1] *
      (start2 * args[21].stencil->stride[2] - args[21].dat->base[2] - d_m[2]);
    p_a[21] = (char *)args[21].data + base21;

    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[22].dat->d_m[d] + OPS_sub_dat_list[args[22].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[22].dat->d_m[d];
    #endif //OPS_MPI
    int base22 = dat22 * 1 *
    (start0 * args[22].stencil->stride[0] - args[22].dat->base[0] - d_m[0]);
    base22 = base22+ dat22 *
      args[22].dat->size[0] *
      (start1 * args[22].stencil->stride[1] - args[22].dat->base[1] - d_m[1]);
    base22 = base22+ dat22 *
      args[22].dat->size[0] *
      args[22].dat->size[1] *
      (start2 * args[22].stencil->stride[2] - args[22].dat->base[2] - d_m[2]);
    p_a[22] = (char *)args[22].data + base22;

    #ifdef OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[23].dat->d_m[d] + OPS_sub_dat_list[args[23].dat->index]->d_im[d];
    #else //OPS_MPI
    for (int d = 0; d < dim; d++) d_m[d] = args[23].dat->d_m[d];
    #endif //OPS_MPI
    int base23 = dat23 * 1 *
    (start0 * args[23].stencil->stride[0] - args[23].dat->base[0] - d_m[0]);
    base23 = base23+ dat23 *
      args[23].dat->size[0] *
      (start1 * args[23].stencil->stride[1] - args[23].dat->base[1] - d_m[1]);
    base23 = base23+ dat23 *
      args[23].dat->size[0] *
      args[23].dat->size[1] *
      (start2 * args[23].stencil->stride[2] - args[23].dat->base[2] - d_m[2]);
    p_a[23] = (char *)args[23].data + base23;


    for ( int n_z=start_i; n_z<finish_i; n_z++ ){
      for ( int n_y=start[1]; n_y<end[1]; n_y++ ){
        for ( int n_x=start[0]; n_x<start[0]+(end[0]-start[0])/SIMD_VEC; n_x++ ){
          //call kernel function, passing in pointers to data -vectorised
          #pragma simd
          for ( int i=0; i<SIMD_VEC; i++ ){
            taylor_green_vortex_block0_12_kernel(  (const double * )p_a[0]+ i*1*1, (const double * )p_a[1]+ i*1*1, (const double * )p_a[2]+ i*1*1,
           (const double * )p_a[3]+ i*1*1, (const double * )p_a[4]+ i*1*1, (const double * )p_a[5]+ i*1*1, (const double * )p_a[6]+ i*1*1,
           (const double * )p_a[7]+ i*1*1, (const double * )p_a[8]+ i*1*1, (const double * )p_a[9]+ i*1*1, (const double * )p_a[10]+ i*1*1,
           (const double * )p_a[11]+ i*1*1, (const double * )p_a[12]+ i*1*1, (const double * )p_a[13]+ i*1*1, (const double * )p_a[14]+ i*1*1,
           (const double * )p_a[15]+ i*1*1, (const double * )p_a[16]+ i*1*1, (const double * )p_a[17]+ i*1*1, (const double * )p_a[18]+ i*1*1,
           (double * )p_a[19]+ i*1*1, (double * )p_a[20]+ i*1*1, (double * )p_a[21]+ i*1*1, (double * )p_a[22]+ i*1*1,
           (double * )p_a[23]+ i*1*1 );

          }

          //shift pointers to data x direction
          p_a[0]= p_a[0] + (dat0 * off0_0)*SIMD_VEC;
          p_a[1]= p_a[1] + (dat1 * off1_0)*SIMD_VEC;
          p_a[2]= p_a[2] + (dat2 * off2_0)*SIMD_VEC;
          p_a[3]= p_a[3] + (dat3 * off3_0)*SIMD_VEC;
          p_a[4]= p_a[4] + (dat4 * off4_0)*SIMD_VEC;
          p_a[5]= p_a[5] + (dat5 * off5_0)*SIMD_VEC;
          p_a[6]= p_a[6] + (dat6 * off6_0)*SIMD_VEC;
          p_a[7]= p_a[7] + (dat7 * off7_0)*SIMD_VEC;
          p_a[8]= p_a[8] + (dat8 * off8_0)*SIMD_VEC;
          p_a[9]= p_a[9] + (dat9 * off9_0)*SIMD_VEC;
          p_a[10]= p_a[10] + (dat10 * off10_0)*SIMD_VEC;
          p_a[11]= p_a[11] + (dat11 * off11_0)*SIMD_VEC;
          p_a[12]= p_a[12] + (dat12 * off12_0)*SIMD_VEC;
          p_a[13]= p_a[13] + (dat13 * off13_0)*SIMD_VEC;
          p_a[14]= p_a[14] + (dat14 * off14_0)*SIMD_VEC;
          p_a[15]= p_a[15] + (dat15 * off15_0)*SIMD_VEC;
          p_a[16]= p_a[16] + (dat16 * off16_0)*SIMD_VEC;
          p_a[17]= p_a[17] + (dat17 * off17_0)*SIMD_VEC;
          p_a[18]= p_a[18] + (dat18 * off18_0)*SIMD_VEC;
          p_a[19]= p_a[19] + (dat19 * off19_0)*SIMD_VEC;
          p_a[20]= p_a[20] + (dat20 * off20_0)*SIMD_VEC;
          p_a[21]= p_a[21] + (dat21 * off21_0)*SIMD_VEC;
          p_a[22]= p_a[22] + (dat22 * off22_0)*SIMD_VEC;
          p_a[23]= p_a[23] + (dat23 * off23_0)*SIMD_VEC;
        }

        for ( int n_x=start[0]+((end[0]-start[0])/SIMD_VEC)*SIMD_VEC; n_x<end[0]; n_x++ ){
          //call kernel function, passing in pointers to data - remainder
          taylor_green_vortex_block0_12_kernel(  (const double * )p_a[0], (const double * )p_a[1], (const double * )p_a[2],
           (const double * )p_a[3], (const double * )p_a[4], (const double * )p_a[5], (const double * )p_a[6],
           (const double * )p_a[7], (const double * )p_a[8], (const double * )p_a[9], (const double * )p_a[10],
           (const double * )p_a[11], (const double * )p_a[12], (const double * )p_a[13], (const double * )p_a[14],
           (const double * )p_a[15], (const double * )p_a[16], (const double * )p_a[17], (const double * )p_a[18],
           (double * )p_a[19], (double * )p_a[20], (double * )p_a[21], (double * )p_a[22],
           (double * )p_a[23] );


          //shift pointers to data x direction
          p_a[0]= p_a[0] + (dat0 * off0_0);
          p_a[1]= p_a[1] + (dat1 * off1_0);
          p_a[2]= p_a[2] + (dat2 * off2_0);
          p_a[3]= p_a[3] + (dat3 * off3_0);
          p_a[4]= p_a[4] + (dat4 * off4_0);
          p_a[5]= p_a[5] + (dat5 * off5_0);
          p_a[6]= p_a[6] + (dat6 * off6_0);
          p_a[7]= p_a[7] + (dat7 * off7_0);
          p_a[8]= p_a[8] + (dat8 * off8_0);
          p_a[9]= p_a[9] + (dat9 * off9_0);
          p_a[10]= p_a[10] + (dat10 * off10_0);
          p_a[11]= p_a[11] + (dat11 * off11_0);
          p_a[12]= p_a[12] + (dat12 * off12_0);
          p_a[13]= p_a[13] + (dat13 * off13_0);
          p_a[14]= p_a[14] + (dat14 * off14_0);
          p_a[15]= p_a[15] + (dat15 * off15_0);
          p_a[16]= p_a[16] + (dat16 * off16_0);
          p_a[17]= p_a[17] + (dat17 * off17_0);
          p_a[18]= p_a[18] + (dat18 * off18_0);
          p_a[19]= p_a[19] + (dat19 * off19_0);
          p_a[20]= p_a[20] + (dat20 * off20_0);
          p_a[21]= p_a[21] + (dat21 * off21_0);
          p_a[22]= p_a[22] + (dat22 * off22_0);
          p_a[23]= p_a[23] + (dat23 * off23_0);
        }

        //shift pointers to data y direction
        p_a[0]= p_a[0] + (dat0 * off0_1);
        p_a[1]= p_a[1] + (dat1 * off1_1);
        p_a[2]= p_a[2] + (dat2 * off2_1);
        p_a[3]= p_a[3] + (dat3 * off3_1);
        p_a[4]= p_a[4] + (dat4 * off4_1);
        p_a[5]= p_a[5] + (dat5 * off5_1);
        p_a[6]= p_a[6] + (dat6 * off6_1);
        p_a[7]= p_a[7] + (dat7 * off7_1);
        p_a[8]= p_a[8] + (dat8 * off8_1);
        p_a[9]= p_a[9] + (dat9 * off9_1);
        p_a[10]= p_a[10] + (dat10 * off10_1);
        p_a[11]= p_a[11] + (dat11 * off11_1);
        p_a[12]= p_a[12] + (dat12 * off12_1);
        p_a[13]= p_a[13] + (dat13 * off13_1);
        p_a[14]= p_a[14] + (dat14 * off14_1);
        p_a[15]= p_a[15] + (dat15 * off15_1);
        p_a[16]= p_a[16] + (dat16 * off16_1);
        p_a[17]= p_a[17] + (dat17 * off17_1);
        p_a[18]= p_a[18] + (dat18 * off18_1);
        p_a[19]= p_a[19] + (dat19 * off19_1);
        p_a[20]= p_a[20] + (dat20 * off20_1);
        p_a[21]= p_a[21] + (dat21 * off21_1);
        p_a[22]= p_a[22] + (dat22 * off22_1);
        p_a[23]= p_a[23] + (dat23 * off23_1);
      }
      //shift pointers to data z direction
      p_a[0]= p_a[0] + (dat0 * off0_2);
      p_a[1]= p_a[1] + (dat1 * off1_2);
      p_a[2]= p_a[2] + (dat2 * off2_2);
      p_a[3]= p_a[3] + (dat3 * off3_2);
      p_a[4]= p_a[4] + (dat4 * off4_2);
      p_a[5]= p_a[5] + (dat5 * off5_2);
      p_a[6]= p_a[6] + (dat6 * off6_2);
      p_a[7]= p_a[7] + (dat7 * off7_2);
      p_a[8]= p_a[8] + (dat8 * off8_2);
      p_a[9]= p_a[9] + (dat9 * off9_2);
      p_a[10]= p_a[10] + (dat10 * off10_2);
      p_a[11]= p_a[11] + (dat11 * off11_2);
      p_a[12]= p_a[12] + (dat12 * off12_2);
      p_a[13]= p_a[13] + (dat13 * off13_2);
      p_a[14]= p_a[14] + (dat14 * off14_2);
      p_a[15]= p_a[15] + (dat15 * off15_2);
      p_a[16]= p_a[16] + (dat16 * off16_2);
      p_a[17]= p_a[17] + (dat17 * off17_2);
      p_a[18]= p_a[18] + (dat18 * off18_2);
      p_a[19]= p_a[19] + (dat19 * off19_2);
      p_a[20]= p_a[20] + (dat20 * off20_2);
      p_a[21]= p_a[21] + (dat21 * off21_2);
      p_a[22]= p_a[22] + (dat22 * off22_2);
      p_a[23]= p_a[23] + (dat23 * off23_2);
    }
  }

  if (OPS_diags > 1) {
    ops_timers_core(&c1,&t1);
    OPS_kernels[12].time += t1-t2;
  }

  ops_set_dirtybit_host(args, 24);

  ops_set_halo_dirtybit3(&args[19],range);
  ops_set_halo_dirtybit3(&args[20],range);
  ops_set_halo_dirtybit3(&args[21],range);
  ops_set_halo_dirtybit3(&args[22],range);
  ops_set_halo_dirtybit3(&args[23],range);

  if (OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    OPS_kernels[12].mpi_time += t2-t1;
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg0);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg1);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg2);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg3);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg4);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg5);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg6);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg7);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg8);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg9);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg10);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg11);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg12);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg13);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg14);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg15);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg16);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg17);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg18);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg19);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg20);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg21);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg22);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg23);
  }
}
