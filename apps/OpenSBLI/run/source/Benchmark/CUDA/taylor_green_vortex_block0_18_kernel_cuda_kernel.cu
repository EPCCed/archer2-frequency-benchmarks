//
// auto-generated by ops.py
//
__constant__ int xdim0_taylor_green_vortex_block0_18_kernel;
int xdim0_taylor_green_vortex_block0_18_kernel_h = -1;
__constant__ int ydim0_taylor_green_vortex_block0_18_kernel;
int ydim0_taylor_green_vortex_block0_18_kernel_h = -1;
__constant__ int xdim1_taylor_green_vortex_block0_18_kernel;
int xdim1_taylor_green_vortex_block0_18_kernel_h = -1;
__constant__ int ydim1_taylor_green_vortex_block0_18_kernel;
int ydim1_taylor_green_vortex_block0_18_kernel_h = -1;
__constant__ int xdim2_taylor_green_vortex_block0_18_kernel;
int xdim2_taylor_green_vortex_block0_18_kernel_h = -1;
__constant__ int ydim2_taylor_green_vortex_block0_18_kernel;
int ydim2_taylor_green_vortex_block0_18_kernel_h = -1;
__constant__ int xdim3_taylor_green_vortex_block0_18_kernel;
int xdim3_taylor_green_vortex_block0_18_kernel_h = -1;
__constant__ int ydim3_taylor_green_vortex_block0_18_kernel;
int ydim3_taylor_green_vortex_block0_18_kernel_h = -1;

#undef OPS_ACC0
#undef OPS_ACC1
#undef OPS_ACC2
#undef OPS_ACC3


#define OPS_ACC0(x,y,z) (x+xdim0_taylor_green_vortex_block0_18_kernel*(y)+xdim0_taylor_green_vortex_block0_18_kernel*ydim0_taylor_green_vortex_block0_18_kernel*(z))
#define OPS_ACC1(x,y,z) (x+xdim1_taylor_green_vortex_block0_18_kernel*(y)+xdim1_taylor_green_vortex_block0_18_kernel*ydim1_taylor_green_vortex_block0_18_kernel*(z))
#define OPS_ACC2(x,y,z) (x+xdim2_taylor_green_vortex_block0_18_kernel*(y)+xdim2_taylor_green_vortex_block0_18_kernel*ydim2_taylor_green_vortex_block0_18_kernel*(z))
#define OPS_ACC3(x,y,z) (x+xdim3_taylor_green_vortex_block0_18_kernel*(y)+xdim3_taylor_green_vortex_block0_18_kernel*ydim3_taylor_green_vortex_block0_18_kernel*(z))

//user function
__device__

 void taylor_green_vortex_block0_18_kernel(const double *u0 , const double *u1 , const double *u2 , const double *rho ,
double *ke , double *enstrophy , double *rhomean)
{
    double temp_eval0 = rinv5*((rc2)*u1[OPS_ACC1(-2,0,0)] - rc3*u1[OPS_ACC1(-1,0,0)] + (rc3)*u1[OPS_ACC1(1,0,0)] -
      rc2*u1[OPS_ACC1(2,0,0)]);
    double temp_eval1 = rinv4*((rc2)*u0[OPS_ACC0(0,-2,0)] - rc3*u0[OPS_ACC0(0,-1,0)] + (rc3)*u0[OPS_ACC0(0,1,0)] -
      rc2*u0[OPS_ACC0(0,2,0)]);
    double temp_eval2 = rinv4*((rc2)*u2[OPS_ACC2(0,-2,0)] - rc3*u2[OPS_ACC2(0,-1,0)] + (rc3)*u2[OPS_ACC2(0,1,0)] -
      rc2*u2[OPS_ACC2(0,2,0)]);
    double temp_eval3 = rinv1*((rc2)*u0[OPS_ACC0(0,0,-2)] - rc3*u0[OPS_ACC0(0,0,-1)] + (rc3)*u0[OPS_ACC0(0,0,1)] -
      rc2*u0[OPS_ACC0(0,0,2)]);
    double temp_eval4 = rinv5*((rc2)*u2[OPS_ACC2(-2,0,0)] - rc3*u2[OPS_ACC2(-1,0,0)] + (rc3)*u2[OPS_ACC2(1,0,0)] -
      rc2*u2[OPS_ACC2(2,0,0)]);
    double temp_eval5 = rinv1*((rc2)*u1[OPS_ACC1(0,0,-2)] - rc3*u1[OPS_ACC1(0,0,-1)] + (rc3)*u1[OPS_ACC1(0,0,1)] -
      rc2*u1[OPS_ACC1(0,0,2)]);
    *ke = *ke + (rc0)*(pow(u0[OPS_ACC0(0,0,0)], 2) + pow(u1[OPS_ACC1(0,0,0)], 2) + pow(u2[OPS_ACC2(0,0,0)],
      2))*rho[OPS_ACC3(0,0,0)];
    *enstrophy = *enstrophy + (rc0)*(pow(temp_eval0 - temp_eval1, 2) + pow(temp_eval2 - temp_eval5, 2) + pow(temp_eval3
      - temp_eval4, 2))*rho[OPS_ACC3(0,0,0)];
   *rhomean = *rhomean + rho[OPS_ACC3(0,0,0)];
}



#undef OPS_ACC0
#undef OPS_ACC1
#undef OPS_ACC2
#undef OPS_ACC3


__global__ void ops_taylor_green_vortex_block0_18_kernel(
const double* __restrict arg0,
const double* __restrict arg1,
const double* __restrict arg2,
const double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
double* __restrict arg6,
int size0,
int size1,
int size2 ){

  double arg4_l[1];
  double arg5_l[1];
  double arg6_l[1];
  for (int d=0; d<1; d++) arg4_l[d] = ZERO_double;
  for (int d=0; d<1; d++) arg5_l[d] = ZERO_double;
  for (int d=0; d<1; d++) arg6_l[d] = ZERO_double;

  int idx_z = blockDim.z * blockIdx.z + threadIdx.z;
  int idx_y = blockDim.y * blockIdx.y + threadIdx.y;
  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  arg0 += idx_x * 1*1 + idx_y * 1*1 * xdim0_taylor_green_vortex_block0_18_kernel + idx_z * 1*1 * xdim0_taylor_green_vortex_block0_18_kernel * ydim0_taylor_green_vortex_block0_18_kernel;
  arg1 += idx_x * 1*1 + idx_y * 1*1 * xdim1_taylor_green_vortex_block0_18_kernel + idx_z * 1*1 * xdim1_taylor_green_vortex_block0_18_kernel * ydim1_taylor_green_vortex_block0_18_kernel;
  arg2 += idx_x * 1*1 + idx_y * 1*1 * xdim2_taylor_green_vortex_block0_18_kernel + idx_z * 1*1 * xdim2_taylor_green_vortex_block0_18_kernel * ydim2_taylor_green_vortex_block0_18_kernel;
  arg3 += idx_x * 1*1 + idx_y * 1*1 * xdim3_taylor_green_vortex_block0_18_kernel + idx_z * 1*1 * xdim3_taylor_green_vortex_block0_18_kernel * ydim3_taylor_green_vortex_block0_18_kernel;

  if (idx_x < size0 && idx_y < size1 && idx_z < size2) {
    taylor_green_vortex_block0_18_kernel(arg0, arg1, arg2, arg3,
                   arg4_l, arg5_l, arg6_l);
  }
  for (int d=0; d<1; d++)
    ops_reduction_cuda<OPS_INC>(&arg4[d+(blockIdx.x + blockIdx.y*gridDim.x + blockIdx.z*gridDim.x*gridDim.y)*1],arg4_l[d]);
  for (int d=0; d<1; d++)
    ops_reduction_cuda<OPS_INC>(&arg5[d+(blockIdx.x + blockIdx.y*gridDim.x + blockIdx.z*gridDim.x*gridDim.y)*1],arg5_l[d]);
  for (int d=0; d<1; d++)
    ops_reduction_cuda<OPS_INC>(&arg6[d+(blockIdx.x + blockIdx.y*gridDim.x + blockIdx.z*gridDim.x*gridDim.y)*1],arg6_l[d]);

}

// host stub function
void ops_par_loop_taylor_green_vortex_block0_18_kernel(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[7] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6};


  #ifdef CHECKPOINTING
  if (!ops_checkpointing_before(args,7,range,16)) return;
  #endif

  if (OPS_diags > 1) {
    ops_timing_realloc(16,"taylor_green_vortex_block0_18_kernel");
    OPS_kernels[16].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  #ifdef OPS_MPI
  sub_block_list sb = OPS_sub_block_list[block->index];
  if (!sb->owned) return;
  for ( int n=0; n<3; n++ ){
    start[n] = sb->decomp_disp[n];end[n] = sb->decomp_disp[n]+sb->decomp_size[n];
    if (start[n] >= range[2*n]) {
      start[n] = 0;
    }
    else {
      start[n] = range[2*n] - start[n];
    }
    if (sb->id_m[n]==MPI_PROC_NULL && range[2*n] < 0) start[n] = range[2*n];
    if (end[n] >= range[2*n+1]) {
      end[n] = range[2*n+1] - sb->decomp_disp[n];
    }
    else {
      end[n] = sb->decomp_size[n];
    }
    if (sb->id_p[n]==MPI_PROC_NULL && (range[2*n+1] > sb->decomp_disp[n]+sb->decomp_size[n]))
      end[n] += (range[2*n+1]-sb->decomp_disp[n]-sb->decomp_size[n]);
  }
  #else //OPS_MPI
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #endif //OPS_MPI

  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);
  int z_size = MAX(0,end[2]-start[2]);

  int xdim0 = args[0].dat->size[0];
  int ydim0 = args[0].dat->size[1];
  int xdim1 = args[1].dat->size[0];
  int ydim1 = args[1].dat->size[1];
  int xdim2 = args[2].dat->size[0];
  int ydim2 = args[2].dat->size[1];
  int xdim3 = args[3].dat->size[0];
  int ydim3 = args[3].dat->size[1];

  if (xdim0 != xdim0_taylor_green_vortex_block0_18_kernel_h || ydim0 != ydim0_taylor_green_vortex_block0_18_kernel_h || xdim1 != xdim1_taylor_green_vortex_block0_18_kernel_h || ydim1 != ydim1_taylor_green_vortex_block0_18_kernel_h || xdim2 != xdim2_taylor_green_vortex_block0_18_kernel_h || ydim2 != ydim2_taylor_green_vortex_block0_18_kernel_h || xdim3 != xdim3_taylor_green_vortex_block0_18_kernel_h || ydim3 != ydim3_taylor_green_vortex_block0_18_kernel_h) {
    cudaMemcpyToSymbol( xdim0_taylor_green_vortex_block0_18_kernel, &xdim0, sizeof(int) );
    xdim0_taylor_green_vortex_block0_18_kernel_h = xdim0;
    cudaMemcpyToSymbol( ydim0_taylor_green_vortex_block0_18_kernel, &ydim0, sizeof(int) );
    ydim0_taylor_green_vortex_block0_18_kernel_h = ydim0;
    cudaMemcpyToSymbol( xdim1_taylor_green_vortex_block0_18_kernel, &xdim1, sizeof(int) );
    xdim1_taylor_green_vortex_block0_18_kernel_h = xdim1;
    cudaMemcpyToSymbol( ydim1_taylor_green_vortex_block0_18_kernel, &ydim1, sizeof(int) );
    ydim1_taylor_green_vortex_block0_18_kernel_h = ydim1;
    cudaMemcpyToSymbol( xdim2_taylor_green_vortex_block0_18_kernel, &xdim2, sizeof(int) );
    xdim2_taylor_green_vortex_block0_18_kernel_h = xdim2;
    cudaMemcpyToSymbol( ydim2_taylor_green_vortex_block0_18_kernel, &ydim2, sizeof(int) );
    ydim2_taylor_green_vortex_block0_18_kernel_h = ydim2;
    cudaMemcpyToSymbol( xdim3_taylor_green_vortex_block0_18_kernel, &xdim3, sizeof(int) );
    xdim3_taylor_green_vortex_block0_18_kernel_h = xdim3;
    cudaMemcpyToSymbol( ydim3_taylor_green_vortex_block0_18_kernel, &ydim3, sizeof(int) );
    ydim3_taylor_green_vortex_block0_18_kernel_h = ydim3;
  }


  #ifdef OPS_MPI
  double *arg4h = (double *)(((ops_reduction)args[4].data)->data + ((ops_reduction)args[4].data)->size * block->index);
  #else //OPS_MPI
  double *arg4h = (double *)(((ops_reduction)args[4].data)->data);
  #endif //OPS_MPI
  #ifdef OPS_MPI
  double *arg5h = (double *)(((ops_reduction)args[5].data)->data + ((ops_reduction)args[5].data)->size * block->index);
  #else //OPS_MPI
  double *arg5h = (double *)(((ops_reduction)args[5].data)->data);
  #endif //OPS_MPI
  #ifdef OPS_MPI
  double *arg6h = (double *)(((ops_reduction)args[6].data)->data + ((ops_reduction)args[6].data)->size * block->index);
  #else //OPS_MPI
  double *arg6h = (double *)(((ops_reduction)args[6].data)->data);
  #endif //OPS_MPI

  dim3 grid( (x_size-1)/OPS_block_size_x+ 1, (y_size-1)/OPS_block_size_y + 1, z_size);
  dim3 tblock(OPS_block_size_x,OPS_block_size_y,1);

  int nblocks = ((x_size-1)/OPS_block_size_x+ 1)*((y_size-1)/OPS_block_size_y + 1)*z_size;
  int maxblocks = nblocks;
  int reduct_bytes = 0;
  int reduct_size = 0;

  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double)*1);
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double)*1);
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double)*1);

  reallocReductArrays(reduct_bytes);
  reduct_bytes = 0;

  arg4.data = OPS_reduct_h + reduct_bytes;
  arg4.data_d = OPS_reduct_d + reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg4.data)[d+b*1] = ZERO_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));

  arg5.data = OPS_reduct_h + reduct_bytes;
  arg5.data_d = OPS_reduct_d + reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg5.data)[d+b*1] = ZERO_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));

  arg6.data = OPS_reduct_h + reduct_bytes;
  arg6.data_d = OPS_reduct_d + reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg6.data)[d+b*1] = ZERO_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));


  mvReductArraysToDevice(reduct_bytes);
  int dat0 = args[0].dat->elem_size;
  int dat1 = args[1].dat->elem_size;
  int dat2 = args[2].dat->elem_size;
  int dat3 = args[3].dat->elem_size;

  char *p_a[7];

  //set up initial pointers
  int d_m[OPS_MAX_DIM];
  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[0].dat->d_m[d] + OPS_sub_dat_list[args[0].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[0].dat->d_m[d];
  #endif //OPS_MPI
  int base0 = dat0 * 1 *
  (start[0] * args[0].stencil->stride[0] - args[0].dat->base[0] - d_m[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1] - args[0].dat->base[1] - d_m[1]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    args[0].dat->size[1] *
    (start[2] * args[0].stencil->stride[2] - args[0].dat->base[2] - d_m[2]);
  p_a[0] = (char *)args[0].data_d + base0;

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[1].dat->d_m[d] + OPS_sub_dat_list[args[1].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[1].dat->d_m[d];
  #endif //OPS_MPI
  int base1 = dat1 * 1 *
  (start[0] * args[1].stencil->stride[0] - args[1].dat->base[0] - d_m[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1] - args[1].dat->base[1] - d_m[1]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    args[1].dat->size[1] *
    (start[2] * args[1].stencil->stride[2] - args[1].dat->base[2] - d_m[2]);
  p_a[1] = (char *)args[1].data_d + base1;

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[2].dat->d_m[d] + OPS_sub_dat_list[args[2].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[2].dat->d_m[d];
  #endif //OPS_MPI
  int base2 = dat2 * 1 *
  (start[0] * args[2].stencil->stride[0] - args[2].dat->base[0] - d_m[0]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1] - args[2].dat->base[1] - d_m[1]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    args[2].dat->size[1] *
    (start[2] * args[2].stencil->stride[2] - args[2].dat->base[2] - d_m[2]);
  p_a[2] = (char *)args[2].data_d + base2;

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[3].dat->d_m[d] + OPS_sub_dat_list[args[3].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[3].dat->d_m[d];
  #endif //OPS_MPI
  int base3 = dat3 * 1 *
  (start[0] * args[3].stencil->stride[0] - args[3].dat->base[0] - d_m[0]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1] - args[3].dat->base[1] - d_m[1]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    args[3].dat->size[1] *
    (start[2] * args[3].stencil->stride[2] - args[3].dat->base[2] - d_m[2]);
  p_a[3] = (char *)args[3].data_d + base3;


  ops_H_D_exchanges_device(args, 7);
  ops_halo_exchanges(args,7,range);

  if (OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    OPS_kernels[16].mpi_time += t2-t1;
  }

  int nshared = 0;
  int nthread = OPS_block_size_x*OPS_block_size_y;

  nshared = MAX(nshared,sizeof(double)*1);
  nshared = MAX(nshared,sizeof(double)*1);
  nshared = MAX(nshared,sizeof(double)*1);

  nshared = MAX(nshared*nthread,reduct_size*nthread);

  //call kernel wrapper function, passing in pointers to data
  ops_taylor_green_vortex_block0_18_kernel<<<grid, tblock, nshared >>> (  (double *)p_a[0], (double *)p_a[1],
           (double *)p_a[2], (double *)p_a[3],
           (double *)arg4.data_d, (double *)arg5.data_d,
           (double *)arg6.data_d,x_size, y_size, z_size);

  mvReductArraysToHost(reduct_bytes);
  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      arg4h[d] = arg4h[d] + ((double *)arg4.data)[d+b*1];
    }
  }
  arg4.data = (char *)arg4h;

  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      arg5h[d] = arg5h[d] + ((double *)arg5.data)[d+b*1];
    }
  }
  arg5.data = (char *)arg5h;

  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      arg6h[d] = arg6h[d] + ((double *)arg6.data)[d+b*1];
    }
  }
  arg6.data = (char *)arg6h;

  if (OPS_diags>1) {
    cutilSafeCall(cudaDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    OPS_kernels[16].time += t1-t2;
  }

  ops_set_dirtybit_device(args, 7);

  if (OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    OPS_kernels[16].mpi_time += t2-t1;
    OPS_kernels[16].transfer += ops_compute_transfer(dim, start, end, &arg0);
    OPS_kernels[16].transfer += ops_compute_transfer(dim, start, end, &arg1);
    OPS_kernels[16].transfer += ops_compute_transfer(dim, start, end, &arg2);
    OPS_kernels[16].transfer += ops_compute_transfer(dim, start, end, &arg3);
  }
}
