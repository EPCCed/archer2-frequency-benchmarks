//
// auto-generated by ops.py
//
#include "./OpenACC/OpenSBLI_common.h"

#define OPS_GPU

extern int xdim0_taylor_green_vortex_block0_12_kernel;
int xdim0_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim0_taylor_green_vortex_block0_12_kernel;
int ydim0_taylor_green_vortex_block0_12_kernel_h = -1;
extern int xdim1_taylor_green_vortex_block0_12_kernel;
int xdim1_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim1_taylor_green_vortex_block0_12_kernel;
int ydim1_taylor_green_vortex_block0_12_kernel_h = -1;
extern int xdim2_taylor_green_vortex_block0_12_kernel;
int xdim2_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim2_taylor_green_vortex_block0_12_kernel;
int ydim2_taylor_green_vortex_block0_12_kernel_h = -1;
extern int xdim3_taylor_green_vortex_block0_12_kernel;
int xdim3_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim3_taylor_green_vortex_block0_12_kernel;
int ydim3_taylor_green_vortex_block0_12_kernel_h = -1;
extern int xdim4_taylor_green_vortex_block0_12_kernel;
int xdim4_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim4_taylor_green_vortex_block0_12_kernel;
int ydim4_taylor_green_vortex_block0_12_kernel_h = -1;
extern int xdim5_taylor_green_vortex_block0_12_kernel;
int xdim5_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim5_taylor_green_vortex_block0_12_kernel;
int ydim5_taylor_green_vortex_block0_12_kernel_h = -1;
extern int xdim6_taylor_green_vortex_block0_12_kernel;
int xdim6_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim6_taylor_green_vortex_block0_12_kernel;
int ydim6_taylor_green_vortex_block0_12_kernel_h = -1;
extern int xdim7_taylor_green_vortex_block0_12_kernel;
int xdim7_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim7_taylor_green_vortex_block0_12_kernel;
int ydim7_taylor_green_vortex_block0_12_kernel_h = -1;
extern int xdim8_taylor_green_vortex_block0_12_kernel;
int xdim8_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim8_taylor_green_vortex_block0_12_kernel;
int ydim8_taylor_green_vortex_block0_12_kernel_h = -1;
extern int xdim9_taylor_green_vortex_block0_12_kernel;
int xdim9_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim9_taylor_green_vortex_block0_12_kernel;
int ydim9_taylor_green_vortex_block0_12_kernel_h = -1;
extern int xdim10_taylor_green_vortex_block0_12_kernel;
int xdim10_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim10_taylor_green_vortex_block0_12_kernel;
int ydim10_taylor_green_vortex_block0_12_kernel_h = -1;
extern int xdim11_taylor_green_vortex_block0_12_kernel;
int xdim11_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim11_taylor_green_vortex_block0_12_kernel;
int ydim11_taylor_green_vortex_block0_12_kernel_h = -1;
extern int xdim12_taylor_green_vortex_block0_12_kernel;
int xdim12_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim12_taylor_green_vortex_block0_12_kernel;
int ydim12_taylor_green_vortex_block0_12_kernel_h = -1;
extern int xdim13_taylor_green_vortex_block0_12_kernel;
int xdim13_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim13_taylor_green_vortex_block0_12_kernel;
int ydim13_taylor_green_vortex_block0_12_kernel_h = -1;
extern int xdim14_taylor_green_vortex_block0_12_kernel;
int xdim14_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim14_taylor_green_vortex_block0_12_kernel;
int ydim14_taylor_green_vortex_block0_12_kernel_h = -1;
extern int xdim15_taylor_green_vortex_block0_12_kernel;
int xdim15_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim15_taylor_green_vortex_block0_12_kernel;
int ydim15_taylor_green_vortex_block0_12_kernel_h = -1;
extern int xdim16_taylor_green_vortex_block0_12_kernel;
int xdim16_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim16_taylor_green_vortex_block0_12_kernel;
int ydim16_taylor_green_vortex_block0_12_kernel_h = -1;
extern int xdim17_taylor_green_vortex_block0_12_kernel;
int xdim17_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim17_taylor_green_vortex_block0_12_kernel;
int ydim17_taylor_green_vortex_block0_12_kernel_h = -1;
extern int xdim18_taylor_green_vortex_block0_12_kernel;
int xdim18_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim18_taylor_green_vortex_block0_12_kernel;
int ydim18_taylor_green_vortex_block0_12_kernel_h = -1;
extern int xdim19_taylor_green_vortex_block0_12_kernel;
int xdim19_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim19_taylor_green_vortex_block0_12_kernel;
int ydim19_taylor_green_vortex_block0_12_kernel_h = -1;
extern int xdim20_taylor_green_vortex_block0_12_kernel;
int xdim20_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim20_taylor_green_vortex_block0_12_kernel;
int ydim20_taylor_green_vortex_block0_12_kernel_h = -1;
extern int xdim21_taylor_green_vortex_block0_12_kernel;
int xdim21_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim21_taylor_green_vortex_block0_12_kernel;
int ydim21_taylor_green_vortex_block0_12_kernel_h = -1;
extern int xdim22_taylor_green_vortex_block0_12_kernel;
int xdim22_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim22_taylor_green_vortex_block0_12_kernel;
int ydim22_taylor_green_vortex_block0_12_kernel_h = -1;
extern int xdim23_taylor_green_vortex_block0_12_kernel;
int xdim23_taylor_green_vortex_block0_12_kernel_h = -1;
extern int ydim23_taylor_green_vortex_block0_12_kernel;
int ydim23_taylor_green_vortex_block0_12_kernel_h = -1;

#ifdef __cplusplus
extern "C" {
#endif
void taylor_green_vortex_block0_12_kernel_c_wrapper(
  double *p_a0,
  double *p_a1,
  double *p_a2,
  double *p_a3,
  double *p_a4,
  double *p_a5,
  double *p_a6,
  double *p_a7,
  double *p_a8,
  double *p_a9,
  double *p_a10,
  double *p_a11,
  double *p_a12,
  double *p_a13,
  double *p_a14,
  double *p_a15,
  double *p_a16,
  double *p_a17,
  double *p_a18,
  double *p_a19,
  double *p_a20,
  double *p_a21,
  double *p_a22,
  double *p_a23,
  int x_size, int y_size, int z_size);

#ifdef __cplusplus
}
#endif

// host stub function
void ops_par_loop_taylor_green_vortex_block0_12_kernel(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3, ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7, ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11, ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15, ops_arg arg16, ops_arg arg17, ops_arg arg18, ops_arg arg19, ops_arg arg20, ops_arg arg21, ops_arg arg22, ops_arg arg23) {

  //Timing
  double t1,t2,c1,c2;
  ops_arg args[24] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23};


  #ifdef CHECKPOINTING
  if (!ops_checkpointing_before(args,24,range,12)) return;
  #endif

  if (OPS_diags > 1) {
    ops_timing_realloc(12,"taylor_green_vortex_block0_12_kernel");
    OPS_kernels[12].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute localy allocated range for the sub-block

  int start[3];
  int end[3];
  #ifdef OPS_MPI
  sub_block_list sb = OPS_sub_block_list[block->index];
  if (!sb->owned) return;
  for ( int n=0; n<3; n++ ){
    start[n] = sb->decomp_disp[n];end[n] = sb->decomp_disp[n]+sb->decomp_size[n];
    if (start[n] >= range[2*n]) {
      start[n] = 0;
    }
    else {
      start[n] = range[2*n] - start[n];
    }
    if (sb->id_m[n]==MPI_PROC_NULL && range[2*n] < 0) start[n] = range[2*n];
    if (end[n] >= range[2*n+1]) {
      end[n] = range[2*n+1] - sb->decomp_disp[n];
    }
    else {
      end[n] = sb->decomp_size[n];
    }
    if (sb->id_p[n]==MPI_PROC_NULL && (range[2*n+1] > sb->decomp_disp[n]+sb->decomp_size[n]))
      end[n] += (range[2*n+1]-sb->decomp_disp[n]-sb->decomp_size[n]);
  }
  #else //OPS_MPI
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #endif //OPS_MPI

  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);
  int z_size = MAX(0,end[2]-start[2]);


  xdim0 = args[0].dat->size[0];
  ydim0 = args[0].dat->size[1];
  xdim1 = args[1].dat->size[0];
  ydim1 = args[1].dat->size[1];
  xdim2 = args[2].dat->size[0];
  ydim2 = args[2].dat->size[1];
  xdim3 = args[3].dat->size[0];
  ydim3 = args[3].dat->size[1];
  xdim4 = args[4].dat->size[0];
  ydim4 = args[4].dat->size[1];
  xdim5 = args[5].dat->size[0];
  ydim5 = args[5].dat->size[1];
  xdim6 = args[6].dat->size[0];
  ydim6 = args[6].dat->size[1];
  xdim7 = args[7].dat->size[0];
  ydim7 = args[7].dat->size[1];
  xdim8 = args[8].dat->size[0];
  ydim8 = args[8].dat->size[1];
  xdim9 = args[9].dat->size[0];
  ydim9 = args[9].dat->size[1];
  xdim10 = args[10].dat->size[0];
  ydim10 = args[10].dat->size[1];
  xdim11 = args[11].dat->size[0];
  ydim11 = args[11].dat->size[1];
  xdim12 = args[12].dat->size[0];
  ydim12 = args[12].dat->size[1];
  xdim13 = args[13].dat->size[0];
  ydim13 = args[13].dat->size[1];
  xdim14 = args[14].dat->size[0];
  ydim14 = args[14].dat->size[1];
  xdim15 = args[15].dat->size[0];
  ydim15 = args[15].dat->size[1];
  xdim16 = args[16].dat->size[0];
  ydim16 = args[16].dat->size[1];
  xdim17 = args[17].dat->size[0];
  ydim17 = args[17].dat->size[1];
  xdim18 = args[18].dat->size[0];
  ydim18 = args[18].dat->size[1];
  xdim19 = args[19].dat->size[0];
  ydim19 = args[19].dat->size[1];
  xdim20 = args[20].dat->size[0];
  ydim20 = args[20].dat->size[1];
  xdim21 = args[21].dat->size[0];
  ydim21 = args[21].dat->size[1];
  xdim22 = args[22].dat->size[0];
  ydim22 = args[22].dat->size[1];
  xdim23 = args[23].dat->size[0];
  ydim23 = args[23].dat->size[1];
  if (xdim0 != xdim0_taylor_green_vortex_block0_12_kernel_h || ydim0 != ydim0_taylor_green_vortex_block0_12_kernel_h || xdim1 != xdim1_taylor_green_vortex_block0_12_kernel_h || ydim1 != ydim1_taylor_green_vortex_block0_12_kernel_h || xdim2 != xdim2_taylor_green_vortex_block0_12_kernel_h || ydim2 != ydim2_taylor_green_vortex_block0_12_kernel_h || xdim3 != xdim3_taylor_green_vortex_block0_12_kernel_h || ydim3 != ydim3_taylor_green_vortex_block0_12_kernel_h || xdim4 != xdim4_taylor_green_vortex_block0_12_kernel_h || ydim4 != ydim4_taylor_green_vortex_block0_12_kernel_h || xdim5 != xdim5_taylor_green_vortex_block0_12_kernel_h || ydim5 != ydim5_taylor_green_vortex_block0_12_kernel_h || xdim6 != xdim6_taylor_green_vortex_block0_12_kernel_h || ydim6 != ydim6_taylor_green_vortex_block0_12_kernel_h || xdim7 != xdim7_taylor_green_vortex_block0_12_kernel_h || ydim7 != ydim7_taylor_green_vortex_block0_12_kernel_h || xdim8 != xdim8_taylor_green_vortex_block0_12_kernel_h || ydim8 != ydim8_taylor_green_vortex_block0_12_kernel_h || xdim9 != xdim9_taylor_green_vortex_block0_12_kernel_h || ydim9 != ydim9_taylor_green_vortex_block0_12_kernel_h || xdim10 != xdim10_taylor_green_vortex_block0_12_kernel_h || ydim10 != ydim10_taylor_green_vortex_block0_12_kernel_h || xdim11 != xdim11_taylor_green_vortex_block0_12_kernel_h || ydim11 != ydim11_taylor_green_vortex_block0_12_kernel_h || xdim12 != xdim12_taylor_green_vortex_block0_12_kernel_h || ydim12 != ydim12_taylor_green_vortex_block0_12_kernel_h || xdim13 != xdim13_taylor_green_vortex_block0_12_kernel_h || ydim13 != ydim13_taylor_green_vortex_block0_12_kernel_h || xdim14 != xdim14_taylor_green_vortex_block0_12_kernel_h || ydim14 != ydim14_taylor_green_vortex_block0_12_kernel_h || xdim15 != xdim15_taylor_green_vortex_block0_12_kernel_h || ydim15 != ydim15_taylor_green_vortex_block0_12_kernel_h || xdim16 != xdim16_taylor_green_vortex_block0_12_kernel_h || ydim16 != ydim16_taylor_green_vortex_block0_12_kernel_h || xdim17 != xdim17_taylor_green_vortex_block0_12_kernel_h || ydim17 != ydim17_taylor_green_vortex_block0_12_kernel_h || xdim18 != xdim18_taylor_green_vortex_block0_12_kernel_h || ydim18 != ydim18_taylor_green_vortex_block0_12_kernel_h || xdim19 != xdim19_taylor_green_vortex_block0_12_kernel_h || ydim19 != ydim19_taylor_green_vortex_block0_12_kernel_h || xdim20 != xdim20_taylor_green_vortex_block0_12_kernel_h || ydim20 != ydim20_taylor_green_vortex_block0_12_kernel_h || xdim21 != xdim21_taylor_green_vortex_block0_12_kernel_h || ydim21 != ydim21_taylor_green_vortex_block0_12_kernel_h || xdim22 != xdim22_taylor_green_vortex_block0_12_kernel_h || ydim22 != ydim22_taylor_green_vortex_block0_12_kernel_h || xdim23 != xdim23_taylor_green_vortex_block0_12_kernel_h || ydim23 != ydim23_taylor_green_vortex_block0_12_kernel_h) {
    xdim0_taylor_green_vortex_block0_12_kernel = xdim0;
    xdim0_taylor_green_vortex_block0_12_kernel_h = xdim0;
    ydim0_taylor_green_vortex_block0_12_kernel = ydim0;
    ydim0_taylor_green_vortex_block0_12_kernel_h = ydim0;
    xdim1_taylor_green_vortex_block0_12_kernel = xdim1;
    xdim1_taylor_green_vortex_block0_12_kernel_h = xdim1;
    ydim1_taylor_green_vortex_block0_12_kernel = ydim1;
    ydim1_taylor_green_vortex_block0_12_kernel_h = ydim1;
    xdim2_taylor_green_vortex_block0_12_kernel = xdim2;
    xdim2_taylor_green_vortex_block0_12_kernel_h = xdim2;
    ydim2_taylor_green_vortex_block0_12_kernel = ydim2;
    ydim2_taylor_green_vortex_block0_12_kernel_h = ydim2;
    xdim3_taylor_green_vortex_block0_12_kernel = xdim3;
    xdim3_taylor_green_vortex_block0_12_kernel_h = xdim3;
    ydim3_taylor_green_vortex_block0_12_kernel = ydim3;
    ydim3_taylor_green_vortex_block0_12_kernel_h = ydim3;
    xdim4_taylor_green_vortex_block0_12_kernel = xdim4;
    xdim4_taylor_green_vortex_block0_12_kernel_h = xdim4;
    ydim4_taylor_green_vortex_block0_12_kernel = ydim4;
    ydim4_taylor_green_vortex_block0_12_kernel_h = ydim4;
    xdim5_taylor_green_vortex_block0_12_kernel = xdim5;
    xdim5_taylor_green_vortex_block0_12_kernel_h = xdim5;
    ydim5_taylor_green_vortex_block0_12_kernel = ydim5;
    ydim5_taylor_green_vortex_block0_12_kernel_h = ydim5;
    xdim6_taylor_green_vortex_block0_12_kernel = xdim6;
    xdim6_taylor_green_vortex_block0_12_kernel_h = xdim6;
    ydim6_taylor_green_vortex_block0_12_kernel = ydim6;
    ydim6_taylor_green_vortex_block0_12_kernel_h = ydim6;
    xdim7_taylor_green_vortex_block0_12_kernel = xdim7;
    xdim7_taylor_green_vortex_block0_12_kernel_h = xdim7;
    ydim7_taylor_green_vortex_block0_12_kernel = ydim7;
    ydim7_taylor_green_vortex_block0_12_kernel_h = ydim7;
    xdim8_taylor_green_vortex_block0_12_kernel = xdim8;
    xdim8_taylor_green_vortex_block0_12_kernel_h = xdim8;
    ydim8_taylor_green_vortex_block0_12_kernel = ydim8;
    ydim8_taylor_green_vortex_block0_12_kernel_h = ydim8;
    xdim9_taylor_green_vortex_block0_12_kernel = xdim9;
    xdim9_taylor_green_vortex_block0_12_kernel_h = xdim9;
    ydim9_taylor_green_vortex_block0_12_kernel = ydim9;
    ydim9_taylor_green_vortex_block0_12_kernel_h = ydim9;
    xdim10_taylor_green_vortex_block0_12_kernel = xdim10;
    xdim10_taylor_green_vortex_block0_12_kernel_h = xdim10;
    ydim10_taylor_green_vortex_block0_12_kernel = ydim10;
    ydim10_taylor_green_vortex_block0_12_kernel_h = ydim10;
    xdim11_taylor_green_vortex_block0_12_kernel = xdim11;
    xdim11_taylor_green_vortex_block0_12_kernel_h = xdim11;
    ydim11_taylor_green_vortex_block0_12_kernel = ydim11;
    ydim11_taylor_green_vortex_block0_12_kernel_h = ydim11;
    xdim12_taylor_green_vortex_block0_12_kernel = xdim12;
    xdim12_taylor_green_vortex_block0_12_kernel_h = xdim12;
    ydim12_taylor_green_vortex_block0_12_kernel = ydim12;
    ydim12_taylor_green_vortex_block0_12_kernel_h = ydim12;
    xdim13_taylor_green_vortex_block0_12_kernel = xdim13;
    xdim13_taylor_green_vortex_block0_12_kernel_h = xdim13;
    ydim13_taylor_green_vortex_block0_12_kernel = ydim13;
    ydim13_taylor_green_vortex_block0_12_kernel_h = ydim13;
    xdim14_taylor_green_vortex_block0_12_kernel = xdim14;
    xdim14_taylor_green_vortex_block0_12_kernel_h = xdim14;
    ydim14_taylor_green_vortex_block0_12_kernel = ydim14;
    ydim14_taylor_green_vortex_block0_12_kernel_h = ydim14;
    xdim15_taylor_green_vortex_block0_12_kernel = xdim15;
    xdim15_taylor_green_vortex_block0_12_kernel_h = xdim15;
    ydim15_taylor_green_vortex_block0_12_kernel = ydim15;
    ydim15_taylor_green_vortex_block0_12_kernel_h = ydim15;
    xdim16_taylor_green_vortex_block0_12_kernel = xdim16;
    xdim16_taylor_green_vortex_block0_12_kernel_h = xdim16;
    ydim16_taylor_green_vortex_block0_12_kernel = ydim16;
    ydim16_taylor_green_vortex_block0_12_kernel_h = ydim16;
    xdim17_taylor_green_vortex_block0_12_kernel = xdim17;
    xdim17_taylor_green_vortex_block0_12_kernel_h = xdim17;
    ydim17_taylor_green_vortex_block0_12_kernel = ydim17;
    ydim17_taylor_green_vortex_block0_12_kernel_h = ydim17;
    xdim18_taylor_green_vortex_block0_12_kernel = xdim18;
    xdim18_taylor_green_vortex_block0_12_kernel_h = xdim18;
    ydim18_taylor_green_vortex_block0_12_kernel = ydim18;
    ydim18_taylor_green_vortex_block0_12_kernel_h = ydim18;
    xdim19_taylor_green_vortex_block0_12_kernel = xdim19;
    xdim19_taylor_green_vortex_block0_12_kernel_h = xdim19;
    ydim19_taylor_green_vortex_block0_12_kernel = ydim19;
    ydim19_taylor_green_vortex_block0_12_kernel_h = ydim19;
    xdim20_taylor_green_vortex_block0_12_kernel = xdim20;
    xdim20_taylor_green_vortex_block0_12_kernel_h = xdim20;
    ydim20_taylor_green_vortex_block0_12_kernel = ydim20;
    ydim20_taylor_green_vortex_block0_12_kernel_h = ydim20;
    xdim21_taylor_green_vortex_block0_12_kernel = xdim21;
    xdim21_taylor_green_vortex_block0_12_kernel_h = xdim21;
    ydim21_taylor_green_vortex_block0_12_kernel = ydim21;
    ydim21_taylor_green_vortex_block0_12_kernel_h = ydim21;
    xdim22_taylor_green_vortex_block0_12_kernel = xdim22;
    xdim22_taylor_green_vortex_block0_12_kernel_h = xdim22;
    ydim22_taylor_green_vortex_block0_12_kernel = ydim22;
    ydim22_taylor_green_vortex_block0_12_kernel_h = ydim22;
    xdim23_taylor_green_vortex_block0_12_kernel = xdim23;
    xdim23_taylor_green_vortex_block0_12_kernel_h = xdim23;
    ydim23_taylor_green_vortex_block0_12_kernel = ydim23;
    ydim23_taylor_green_vortex_block0_12_kernel_h = ydim23;
  }

  int dat0 = args[0].dat->elem_size;
  int dat1 = args[1].dat->elem_size;
  int dat2 = args[2].dat->elem_size;
  int dat3 = args[3].dat->elem_size;
  int dat4 = args[4].dat->elem_size;
  int dat5 = args[5].dat->elem_size;
  int dat6 = args[6].dat->elem_size;
  int dat7 = args[7].dat->elem_size;
  int dat8 = args[8].dat->elem_size;
  int dat9 = args[9].dat->elem_size;
  int dat10 = args[10].dat->elem_size;
  int dat11 = args[11].dat->elem_size;
  int dat12 = args[12].dat->elem_size;
  int dat13 = args[13].dat->elem_size;
  int dat14 = args[14].dat->elem_size;
  int dat15 = args[15].dat->elem_size;
  int dat16 = args[16].dat->elem_size;
  int dat17 = args[17].dat->elem_size;
  int dat18 = args[18].dat->elem_size;
  int dat19 = args[19].dat->elem_size;
  int dat20 = args[20].dat->elem_size;
  int dat21 = args[21].dat->elem_size;
  int dat22 = args[22].dat->elem_size;
  int dat23 = args[23].dat->elem_size;


  //set up initial pointers
  int d_m[OPS_MAX_DIM];
  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[0].dat->d_m[d] + OPS_sub_dat_list[args[0].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[0].dat->d_m[d];
  #endif //OPS_MPI
  int base0 = dat0 * 1 *
    (start[0] * args[0].stencil->stride[0] - args[0].dat->base[0] - d_m[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1] - args[0].dat->base[1] - d_m[1]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    args[0].dat->size[1] *
    (start[2] * args[0].stencil->stride[2] - args[0].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a0 = (double *)((char *)args[0].data_d + base0);
  #else
  double *p_a0 = (double *)((char *)args[0].data + base0);
  #endif

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[1].dat->d_m[d] + OPS_sub_dat_list[args[1].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[1].dat->d_m[d];
  #endif //OPS_MPI
  int base1 = dat1 * 1 *
    (start[0] * args[1].stencil->stride[0] - args[1].dat->base[0] - d_m[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1] - args[1].dat->base[1] - d_m[1]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    args[1].dat->size[1] *
    (start[2] * args[1].stencil->stride[2] - args[1].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a1 = (double *)((char *)args[1].data_d + base1);
  #else
  double *p_a1 = (double *)((char *)args[1].data + base1);
  #endif

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[2].dat->d_m[d] + OPS_sub_dat_list[args[2].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[2].dat->d_m[d];
  #endif //OPS_MPI
  int base2 = dat2 * 1 *
    (start[0] * args[2].stencil->stride[0] - args[2].dat->base[0] - d_m[0]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1] - args[2].dat->base[1] - d_m[1]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    args[2].dat->size[1] *
    (start[2] * args[2].stencil->stride[2] - args[2].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a2 = (double *)((char *)args[2].data_d + base2);
  #else
  double *p_a2 = (double *)((char *)args[2].data + base2);
  #endif

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[3].dat->d_m[d] + OPS_sub_dat_list[args[3].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[3].dat->d_m[d];
  #endif //OPS_MPI
  int base3 = dat3 * 1 *
    (start[0] * args[3].stencil->stride[0] - args[3].dat->base[0] - d_m[0]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1] - args[3].dat->base[1] - d_m[1]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    args[3].dat->size[1] *
    (start[2] * args[3].stencil->stride[2] - args[3].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a3 = (double *)((char *)args[3].data_d + base3);
  #else
  double *p_a3 = (double *)((char *)args[3].data + base3);
  #endif

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[4].dat->d_m[d] + OPS_sub_dat_list[args[4].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[4].dat->d_m[d];
  #endif //OPS_MPI
  int base4 = dat4 * 1 *
    (start[0] * args[4].stencil->stride[0] - args[4].dat->base[0] - d_m[0]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    (start[1] * args[4].stencil->stride[1] - args[4].dat->base[1] - d_m[1]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    args[4].dat->size[1] *
    (start[2] * args[4].stencil->stride[2] - args[4].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a4 = (double *)((char *)args[4].data_d + base4);
  #else
  double *p_a4 = (double *)((char *)args[4].data + base4);
  #endif

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[5].dat->d_m[d] + OPS_sub_dat_list[args[5].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[5].dat->d_m[d];
  #endif //OPS_MPI
  int base5 = dat5 * 1 *
    (start[0] * args[5].stencil->stride[0] - args[5].dat->base[0] - d_m[0]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    (start[1] * args[5].stencil->stride[1] - args[5].dat->base[1] - d_m[1]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    args[5].dat->size[1] *
    (start[2] * args[5].stencil->stride[2] - args[5].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a5 = (double *)((char *)args[5].data_d + base5);
  #else
  double *p_a5 = (double *)((char *)args[5].data + base5);
  #endif

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[6].dat->d_m[d] + OPS_sub_dat_list[args[6].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[6].dat->d_m[d];
  #endif //OPS_MPI
  int base6 = dat6 * 1 *
    (start[0] * args[6].stencil->stride[0] - args[6].dat->base[0] - d_m[0]);
  base6 = base6+ dat6 *
    args[6].dat->size[0] *
    (start[1] * args[6].stencil->stride[1] - args[6].dat->base[1] - d_m[1]);
  base6 = base6+ dat6 *
    args[6].dat->size[0] *
    args[6].dat->size[1] *
    (start[2] * args[6].stencil->stride[2] - args[6].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a6 = (double *)((char *)args[6].data_d + base6);
  #else
  double *p_a6 = (double *)((char *)args[6].data + base6);
  #endif

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[7].dat->d_m[d] + OPS_sub_dat_list[args[7].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[7].dat->d_m[d];
  #endif //OPS_MPI
  int base7 = dat7 * 1 *
    (start[0] * args[7].stencil->stride[0] - args[7].dat->base[0] - d_m[0]);
  base7 = base7+ dat7 *
    args[7].dat->size[0] *
    (start[1] * args[7].stencil->stride[1] - args[7].dat->base[1] - d_m[1]);
  base7 = base7+ dat7 *
    args[7].dat->size[0] *
    args[7].dat->size[1] *
    (start[2] * args[7].stencil->stride[2] - args[7].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a7 = (double *)((char *)args[7].data_d + base7);
  #else
  double *p_a7 = (double *)((char *)args[7].data + base7);
  #endif

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[8].dat->d_m[d] + OPS_sub_dat_list[args[8].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[8].dat->d_m[d];
  #endif //OPS_MPI
  int base8 = dat8 * 1 *
    (start[0] * args[8].stencil->stride[0] - args[8].dat->base[0] - d_m[0]);
  base8 = base8+ dat8 *
    args[8].dat->size[0] *
    (start[1] * args[8].stencil->stride[1] - args[8].dat->base[1] - d_m[1]);
  base8 = base8+ dat8 *
    args[8].dat->size[0] *
    args[8].dat->size[1] *
    (start[2] * args[8].stencil->stride[2] - args[8].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a8 = (double *)((char *)args[8].data_d + base8);
  #else
  double *p_a8 = (double *)((char *)args[8].data + base8);
  #endif

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[9].dat->d_m[d] + OPS_sub_dat_list[args[9].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[9].dat->d_m[d];
  #endif //OPS_MPI
  int base9 = dat9 * 1 *
    (start[0] * args[9].stencil->stride[0] - args[9].dat->base[0] - d_m[0]);
  base9 = base9+ dat9 *
    args[9].dat->size[0] *
    (start[1] * args[9].stencil->stride[1] - args[9].dat->base[1] - d_m[1]);
  base9 = base9+ dat9 *
    args[9].dat->size[0] *
    args[9].dat->size[1] *
    (start[2] * args[9].stencil->stride[2] - args[9].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a9 = (double *)((char *)args[9].data_d + base9);
  #else
  double *p_a9 = (double *)((char *)args[9].data + base9);
  #endif

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[10].dat->d_m[d] + OPS_sub_dat_list[args[10].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[10].dat->d_m[d];
  #endif //OPS_MPI
  int base10 = dat10 * 1 *
    (start[0] * args[10].stencil->stride[0] - args[10].dat->base[0] - d_m[0]);
  base10 = base10+ dat10 *
    args[10].dat->size[0] *
    (start[1] * args[10].stencil->stride[1] - args[10].dat->base[1] - d_m[1]);
  base10 = base10+ dat10 *
    args[10].dat->size[0] *
    args[10].dat->size[1] *
    (start[2] * args[10].stencil->stride[2] - args[10].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a10 = (double *)((char *)args[10].data_d + base10);
  #else
  double *p_a10 = (double *)((char *)args[10].data + base10);
  #endif

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[11].dat->d_m[d] + OPS_sub_dat_list[args[11].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[11].dat->d_m[d];
  #endif //OPS_MPI
  int base11 = dat11 * 1 *
    (start[0] * args[11].stencil->stride[0] - args[11].dat->base[0] - d_m[0]);
  base11 = base11+ dat11 *
    args[11].dat->size[0] *
    (start[1] * args[11].stencil->stride[1] - args[11].dat->base[1] - d_m[1]);
  base11 = base11+ dat11 *
    args[11].dat->size[0] *
    args[11].dat->size[1] *
    (start[2] * args[11].stencil->stride[2] - args[11].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a11 = (double *)((char *)args[11].data_d + base11);
  #else
  double *p_a11 = (double *)((char *)args[11].data + base11);
  #endif

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[12].dat->d_m[d] + OPS_sub_dat_list[args[12].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[12].dat->d_m[d];
  #endif //OPS_MPI
  int base12 = dat12 * 1 *
    (start[0] * args[12].stencil->stride[0] - args[12].dat->base[0] - d_m[0]);
  base12 = base12+ dat12 *
    args[12].dat->size[0] *
    (start[1] * args[12].stencil->stride[1] - args[12].dat->base[1] - d_m[1]);
  base12 = base12+ dat12 *
    args[12].dat->size[0] *
    args[12].dat->size[1] *
    (start[2] * args[12].stencil->stride[2] - args[12].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a12 = (double *)((char *)args[12].data_d + base12);
  #else
  double *p_a12 = (double *)((char *)args[12].data + base12);
  #endif

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[13].dat->d_m[d] + OPS_sub_dat_list[args[13].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[13].dat->d_m[d];
  #endif //OPS_MPI
  int base13 = dat13 * 1 *
    (start[0] * args[13].stencil->stride[0] - args[13].dat->base[0] - d_m[0]);
  base13 = base13+ dat13 *
    args[13].dat->size[0] *
    (start[1] * args[13].stencil->stride[1] - args[13].dat->base[1] - d_m[1]);
  base13 = base13+ dat13 *
    args[13].dat->size[0] *
    args[13].dat->size[1] *
    (start[2] * args[13].stencil->stride[2] - args[13].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a13 = (double *)((char *)args[13].data_d + base13);
  #else
  double *p_a13 = (double *)((char *)args[13].data + base13);
  #endif

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[14].dat->d_m[d] + OPS_sub_dat_list[args[14].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[14].dat->d_m[d];
  #endif //OPS_MPI
  int base14 = dat14 * 1 *
    (start[0] * args[14].stencil->stride[0] - args[14].dat->base[0] - d_m[0]);
  base14 = base14+ dat14 *
    args[14].dat->size[0] *
    (start[1] * args[14].stencil->stride[1] - args[14].dat->base[1] - d_m[1]);
  base14 = base14+ dat14 *
    args[14].dat->size[0] *
    args[14].dat->size[1] *
    (start[2] * args[14].stencil->stride[2] - args[14].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a14 = (double *)((char *)args[14].data_d + base14);
  #else
  double *p_a14 = (double *)((char *)args[14].data + base14);
  #endif

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[15].dat->d_m[d] + OPS_sub_dat_list[args[15].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[15].dat->d_m[d];
  #endif //OPS_MPI
  int base15 = dat15 * 1 *
    (start[0] * args[15].stencil->stride[0] - args[15].dat->base[0] - d_m[0]);
  base15 = base15+ dat15 *
    args[15].dat->size[0] *
    (start[1] * args[15].stencil->stride[1] - args[15].dat->base[1] - d_m[1]);
  base15 = base15+ dat15 *
    args[15].dat->size[0] *
    args[15].dat->size[1] *
    (start[2] * args[15].stencil->stride[2] - args[15].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a15 = (double *)((char *)args[15].data_d + base15);
  #else
  double *p_a15 = (double *)((char *)args[15].data + base15);
  #endif

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[16].dat->d_m[d] + OPS_sub_dat_list[args[16].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[16].dat->d_m[d];
  #endif //OPS_MPI
  int base16 = dat16 * 1 *
    (start[0] * args[16].stencil->stride[0] - args[16].dat->base[0] - d_m[0]);
  base16 = base16+ dat16 *
    args[16].dat->size[0] *
    (start[1] * args[16].stencil->stride[1] - args[16].dat->base[1] - d_m[1]);
  base16 = base16+ dat16 *
    args[16].dat->size[0] *
    args[16].dat->size[1] *
    (start[2] * args[16].stencil->stride[2] - args[16].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a16 = (double *)((char *)args[16].data_d + base16);
  #else
  double *p_a16 = (double *)((char *)args[16].data + base16);
  #endif

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[17].dat->d_m[d] + OPS_sub_dat_list[args[17].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[17].dat->d_m[d];
  #endif //OPS_MPI
  int base17 = dat17 * 1 *
    (start[0] * args[17].stencil->stride[0] - args[17].dat->base[0] - d_m[0]);
  base17 = base17+ dat17 *
    args[17].dat->size[0] *
    (start[1] * args[17].stencil->stride[1] - args[17].dat->base[1] - d_m[1]);
  base17 = base17+ dat17 *
    args[17].dat->size[0] *
    args[17].dat->size[1] *
    (start[2] * args[17].stencil->stride[2] - args[17].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a17 = (double *)((char *)args[17].data_d + base17);
  #else
  double *p_a17 = (double *)((char *)args[17].data + base17);
  #endif

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[18].dat->d_m[d] + OPS_sub_dat_list[args[18].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[18].dat->d_m[d];
  #endif //OPS_MPI
  int base18 = dat18 * 1 *
    (start[0] * args[18].stencil->stride[0] - args[18].dat->base[0] - d_m[0]);
  base18 = base18+ dat18 *
    args[18].dat->size[0] *
    (start[1] * args[18].stencil->stride[1] - args[18].dat->base[1] - d_m[1]);
  base18 = base18+ dat18 *
    args[18].dat->size[0] *
    args[18].dat->size[1] *
    (start[2] * args[18].stencil->stride[2] - args[18].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a18 = (double *)((char *)args[18].data_d + base18);
  #else
  double *p_a18 = (double *)((char *)args[18].data + base18);
  #endif

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[19].dat->d_m[d] + OPS_sub_dat_list[args[19].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[19].dat->d_m[d];
  #endif //OPS_MPI
  int base19 = dat19 * 1 *
    (start[0] * args[19].stencil->stride[0] - args[19].dat->base[0] - d_m[0]);
  base19 = base19+ dat19 *
    args[19].dat->size[0] *
    (start[1] * args[19].stencil->stride[1] - args[19].dat->base[1] - d_m[1]);
  base19 = base19+ dat19 *
    args[19].dat->size[0] *
    args[19].dat->size[1] *
    (start[2] * args[19].stencil->stride[2] - args[19].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a19 = (double *)((char *)args[19].data_d + base19);
  #else
  double *p_a19 = (double *)((char *)args[19].data + base19);
  #endif

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[20].dat->d_m[d] + OPS_sub_dat_list[args[20].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[20].dat->d_m[d];
  #endif //OPS_MPI
  int base20 = dat20 * 1 *
    (start[0] * args[20].stencil->stride[0] - args[20].dat->base[0] - d_m[0]);
  base20 = base20+ dat20 *
    args[20].dat->size[0] *
    (start[1] * args[20].stencil->stride[1] - args[20].dat->base[1] - d_m[1]);
  base20 = base20+ dat20 *
    args[20].dat->size[0] *
    args[20].dat->size[1] *
    (start[2] * args[20].stencil->stride[2] - args[20].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a20 = (double *)((char *)args[20].data_d + base20);
  #else
  double *p_a20 = (double *)((char *)args[20].data + base20);
  #endif

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[21].dat->d_m[d] + OPS_sub_dat_list[args[21].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[21].dat->d_m[d];
  #endif //OPS_MPI
  int base21 = dat21 * 1 *
    (start[0] * args[21].stencil->stride[0] - args[21].dat->base[0] - d_m[0]);
  base21 = base21+ dat21 *
    args[21].dat->size[0] *
    (start[1] * args[21].stencil->stride[1] - args[21].dat->base[1] - d_m[1]);
  base21 = base21+ dat21 *
    args[21].dat->size[0] *
    args[21].dat->size[1] *
    (start[2] * args[21].stencil->stride[2] - args[21].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a21 = (double *)((char *)args[21].data_d + base21);
  #else
  double *p_a21 = (double *)((char *)args[21].data + base21);
  #endif

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[22].dat->d_m[d] + OPS_sub_dat_list[args[22].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[22].dat->d_m[d];
  #endif //OPS_MPI
  int base22 = dat22 * 1 *
    (start[0] * args[22].stencil->stride[0] - args[22].dat->base[0] - d_m[0]);
  base22 = base22+ dat22 *
    args[22].dat->size[0] *
    (start[1] * args[22].stencil->stride[1] - args[22].dat->base[1] - d_m[1]);
  base22 = base22+ dat22 *
    args[22].dat->size[0] *
    args[22].dat->size[1] *
    (start[2] * args[22].stencil->stride[2] - args[22].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a22 = (double *)((char *)args[22].data_d + base22);
  #else
  double *p_a22 = (double *)((char *)args[22].data + base22);
  #endif

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[23].dat->d_m[d] + OPS_sub_dat_list[args[23].dat->index]->d_im[d];
  #else //OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[23].dat->d_m[d];
  #endif //OPS_MPI
  int base23 = dat23 * 1 *
    (start[0] * args[23].stencil->stride[0] - args[23].dat->base[0] - d_m[0]);
  base23 = base23+ dat23 *
    args[23].dat->size[0] *
    (start[1] * args[23].stencil->stride[1] - args[23].dat->base[1] - d_m[1]);
  base23 = base23+ dat23 *
    args[23].dat->size[0] *
    args[23].dat->size[1] *
    (start[2] * args[23].stencil->stride[2] - args[23].dat->base[2] - d_m[2]);
  #ifdef OPS_GPU
  double *p_a23 = (double *)((char *)args[23].data_d + base23);
  #else
  double *p_a23 = (double *)((char *)args[23].data + base23);
  #endif


  #ifdef OPS_GPU
  ops_H_D_exchanges_device(args, 24);
  #else
  ops_H_D_exchanges_host(args, 24);
  #endif
  ops_halo_exchanges(args,24,range);

  #ifdef OPS_GPU
  ops_H_D_exchanges_device(args, 24);
  #else
  ops_H_D_exchanges_host(args, 24);
  #endif
  if (OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    OPS_kernels[12].mpi_time += t2-t1;
  }

  taylor_green_vortex_block0_12_kernel_c_wrapper(
    p_a0,
    p_a1,
    p_a2,
    p_a3,
    p_a4,
    p_a5,
    p_a6,
    p_a7,
    p_a8,
    p_a9,
    p_a10,
    p_a11,
    p_a12,
    p_a13,
    p_a14,
    p_a15,
    p_a16,
    p_a17,
    p_a18,
    p_a19,
    p_a20,
    p_a21,
    p_a22,
    p_a23,
    x_size, y_size, z_size);

  if (OPS_diags > 1) {
    ops_timers_core(&c1,&t1);
    OPS_kernels[12].time += t1-t2;
  }
  #ifdef OPS_GPU
  ops_set_dirtybit_device(args, 24);
  #else
  ops_set_dirtybit_host(args, 24);
  #endif
  ops_set_halo_dirtybit3(&args[19],range);
  ops_set_halo_dirtybit3(&args[20],range);
  ops_set_halo_dirtybit3(&args[21],range);
  ops_set_halo_dirtybit3(&args[22],range);
  ops_set_halo_dirtybit3(&args[23],range);

  if (OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    OPS_kernels[12].mpi_time += t2-t1;
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg0);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg1);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg2);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg3);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg4);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg5);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg6);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg7);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg8);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg9);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg10);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg11);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg12);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg13);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg14);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg15);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg16);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg17);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg18);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg19);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg20);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg21);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg22);
    OPS_kernels[12].transfer += ops_compute_transfer(dim, start, end, &arg23);
  }
}
